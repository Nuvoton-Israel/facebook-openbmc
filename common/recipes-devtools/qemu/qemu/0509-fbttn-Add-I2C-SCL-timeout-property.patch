From 95a337f6e9075a9cd6ba0d1a35829b5e80ac67bf Mon Sep 17 00:00:00 2001
From: Peter Delevoryas <pdel@fb.com>
Date: Tue, 16 Aug 2022 00:32:54 -0700
Subject: [PATCH 509/532] fbttn: Add I2C SCL timeout property

This lets us inject errors using QOM:

```
qom-set /machine/soc/i2c/bus[12] scl-timeout true
qom-set /machine/soc/i2c/bus[12] scl-timeout false
```

This should cause the driver to attempt to recover the bus. If the
driver recovery logic is implemented properly, then there shouldn't be
any problems, but if it's not correct (for example, trying to do it
within the IRQ handler), then a crash or deadlock is possible.

Signed-off-by: Peter Delevoryas <pdel@fb.com>
---
 hw/arm/aspeed.c             |  6 ++++++
 hw/i2c/aspeed_i2c.c         | 43 +++++++++++++++++++++++++++++++++++++
 hw/i2c/trace-events         |  1 +
 include/hw/i2c/aspeed_i2c.h |  1 +
 4 files changed, 51 insertions(+)

diff --git a/hw/arm/aspeed.c b/hw/arm/aspeed.c
index 57815ea5b4..08a60a35fc 100644
--- a/hw/arm/aspeed.c
+++ b/hw/arm/aspeed.c
@@ -1024,6 +1024,11 @@ static void fby35_i2c_init(AspeedMachineState *bmc)
      */
 }
 
+static void fbttn_i2c_init(AspeedMachineState *bmc)
+{
+    i2c_slave_create_simple(aspeed_i2c_get_bus(&bmc->soc.i2c, 12), "tmp421", 0x1f);
+}
+
 static void qcom_dc_scm_bmc_i2c_init(AspeedMachineState *bmc)
 {
     AspeedSoCState *soc = &bmc->soc;
@@ -1909,6 +1914,7 @@ static const struct FBMachineData fb_machines[] = {
         .macs_mask   = ASPEED_MAC0_ON,
         .stdout_path = ASPEED_DEV_UART5,
         .ram_size    = 1 * GiB,
+        .i2c_init    = fbttn_i2c_init,
     },
     {
         .name        = "fbtp-bmc",
diff --git a/hw/i2c/aspeed_i2c.c b/hw/i2c/aspeed_i2c.c
index 44905d7899..e4b394ddd2 100644
--- a/hw/i2c/aspeed_i2c.c
+++ b/hw/i2c/aspeed_i2c.c
@@ -26,6 +26,7 @@
 #include "qemu/module.h"
 #include "qemu/error-report.h"
 #include "qapi/error.h"
+#include "qapi/visitor.h"
 #include "hw/i2c/aspeed_i2c.h"
 #include "hw/irq.h"
 #include "hw/qdev-properties.h"
@@ -109,6 +110,8 @@ static uint64_t aspeed_i2c_bus_old_read(AspeedI2CBus *bus, hwaddr offset,
         break;
     case A_I2CD_CMD:
         value = SHARED_FIELD_DP32(value, BUS_BUSY_STS, i2c_bus_busy(bus->bus));
+        value = SHARED_FIELD_DP32(value, SCL_LINE_STS, !bus->scl_timeout);
+        value = SHARED_FIELD_DP32(value, SDA_LINE_STS, !bus->scl_timeout);
         break;
     case A_I2CD_DMA_ADDR:
         if (!aic->has_dma) {
@@ -458,11 +461,28 @@ static void aspeed_i2c_bus_handle_cmd(AspeedI2CBus *bus, uint64_t value)
         aspeed_i2c_bus_cmd_dump(bus);
     }
 
+    if (SHARED_ARRAY_FIELD_EX32(bus->regs, reg_cmd, BUS_RECOVER_CMD_EN)) {
+        if (!bus->scl_timeout) {
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, TX_ACK, 0);
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, SCL_TIMEOUT, 0);
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, SDA_DL_TIMEOUT, 0);
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, BUS_RECOVER_DONE, 1);
+        }
+        return;
+    }
+
     if (SHARED_ARRAY_FIELD_EX32(bus->regs, reg_cmd, M_START_CMD)) {
         uint8_t state = aspeed_i2c_get_state(bus) & I2CD_MACTIVE ?
             I2CD_MSTARTR : I2CD_MSTART;
         uint8_t addr;
 
+        if (bus->scl_timeout) {
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, TX_ACK, 1);
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, SCL_TIMEOUT, 1);
+            SHARED_ARRAY_FIELD_DP32(bus->regs, reg_intr_sts, SDA_DL_TIMEOUT, 1);
+            return;
+        }
+
         aspeed_i2c_set_state(bus, state);
 
         addr = aspeed_i2c_get_addr(bus);
@@ -1238,6 +1258,24 @@ static Property aspeed_i2c_bus_properties[] = {
     DEFINE_PROP_END_OF_LIST(),
 };
 
+static void aspeed_i2c_bus_get_scl_timeout(Object *obj, Visitor *v,
+                                           const char *name, void *opaque,
+                                           Error **errp)
+{
+    AspeedI2CBus *s = ASPEED_I2C_BUS(obj);
+
+    visit_type_bool(v, name, &s->scl_timeout, errp);
+}
+
+static void aspeed_i2c_bus_set_scl_timeout(Object *obj, Visitor *v,
+                                           const char *name, void *opaque,
+                                           Error **errp)
+{
+    AspeedI2CBus *s = ASPEED_I2C_BUS(obj);
+
+    visit_type_bool(v, name, &s->scl_timeout, errp);
+}
+
 static void aspeed_i2c_bus_class_init(ObjectClass *klass, void *data)
 {
     DeviceClass *dc = DEVICE_CLASS(klass);
@@ -1246,6 +1284,11 @@ static void aspeed_i2c_bus_class_init(ObjectClass *klass, void *data)
     dc->realize = aspeed_i2c_bus_realize;
     dc->reset = aspeed_i2c_bus_reset;
     device_class_set_props(dc, aspeed_i2c_bus_properties);
+
+    object_class_property_add(klass, "scl-timeout", "bool",
+                              aspeed_i2c_bus_get_scl_timeout,
+                              aspeed_i2c_bus_set_scl_timeout,
+                              NULL, NULL);
 }
 
 static const TypeInfo aspeed_i2c_bus_info = {
diff --git a/hw/i2c/trace-events b/hw/i2c/trace-events
index d7b1e25858..c2f946b044 100644
--- a/hw/i2c/trace-events
+++ b/hw/i2c/trace-events
@@ -28,6 +28,7 @@ aspeed_i2c_bus_read(uint32_t busid, uint64_t offset, unsigned size, uint64_t val
 aspeed_i2c_bus_write(uint32_t busid, uint64_t offset, unsigned size, uint64_t value) "bus[%d]: To 0x%" PRIx64 " of size %u: 0x%" PRIx64
 aspeed_i2c_bus_send(const char *mode, int i, int count, uint8_t byte) "%s send %d/%d 0x%02x"
 aspeed_i2c_bus_recv(const char *mode, int i, int count, uint8_t byte) "%s recv %d/%d 0x%02x"
+aspeed_i2c_scl_timeout(uint32_t busid) "bus[%d]: raising SCL timeout"
 
 # npcm7xx_smbus.c
 
diff --git a/include/hw/i2c/aspeed_i2c.h b/include/hw/i2c/aspeed_i2c.h
index 2e1e15aaf0..ee4cf597c0 100644
--- a/include/hw/i2c/aspeed_i2c.h
+++ b/include/hw/i2c/aspeed_i2c.h
@@ -242,6 +242,7 @@ struct AspeedI2CBus {
     I2CBus *bus;
     uint8_t id;
     qemu_irq irq;
+    bool scl_timeout;
 
     uint32_t regs[ASPEED_I2C_NEW_NUM_REG];
 };
-- 
2.43.0

