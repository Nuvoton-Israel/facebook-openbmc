From 173ff643f7369df2558e71a3ecdbe6c53c101599 Mon Sep 17 00:00:00 2001
From: lora <lora.lin.wiwynn@gmail.com>
Date: Fri, 27 Sep 2024 16:21:45 +0800
Subject: [PATCH 12/12] Support OEM-META command for getting Http boot
 certification

Summary:
- Support parsing read file IO for Http Boot command (type: 0x03) and
returning the Http boot certification stored in BMC.
- Modify write file IO command due to libpldm deprecating
decode_oem_meta_file_io_req function.

Change-Id: Iaa0da923a8703703744eccccbbc8d95146444c14
Signed-off-by: Lora Lin <lora.lin.wiwynn@gmail.com>
---
 libpldmresponder/meson.build                  |   1 +
 .../libpldmresponder/oem_meta_file_io.cpp     |  78 +++++++++
 .../libpldmresponder/oem_meta_file_io.hpp     |  17 ++
 .../oem_meta_file_io_by_type.hpp              |   1 +
 .../oem_meta_file_io_type_http_boot.cpp       | 165 ++++++++++++++++++
 .../oem_meta_file_io_type_http_boot.hpp       |  41 +++++
 6 files changed, 303 insertions(+)
 create mode 100644 oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.cpp
 create mode 100644 oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.hpp

diff --git a/libpldmresponder/meson.build b/libpldmresponder/meson.build
index 6cbf924..de9e778 100644
--- a/libpldmresponder/meson.build
+++ b/libpldmresponder/meson.build
@@ -72,6 +72,7 @@ if get_option('oem-meta').allowed()
         '../oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.cpp',
         '../oem/meta/libpldmresponder/oem_meta_file_io_type_power_control.cpp',
         '../oem/meta/libpldmresponder/oem_meta_file_io_type_apml_alert.cpp',
+        '../oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.cpp',
     ]
 endif
 
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io.cpp b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
index 36ff128..f363f87 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io.cpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
@@ -3,6 +3,7 @@
 #include "oem_meta_file_io_type_apml_alert.hpp"
 #include "oem_meta_file_io_type_bios_version.hpp"
 #include "oem_meta_file_io_type_event_log.hpp"
+#include "oem_meta_file_io_type_http_boot.hpp"
 #include "oem_meta_file_io_type_post_code.hpp"
 #include "oem_meta_file_io_type_power_control.hpp"
 #include "xyz/openbmc_project/Common/error.hpp"
@@ -39,6 +40,9 @@ std::unique_ptr<FileHandler>
             return std::make_unique<PowerControlHandler>(
                 messageTid, configurationDiscovery->getConfigurations(),
                 dBusIntf);
+        case HTTP_BOOT:
+            return std::make_unique<HttpBootHandler>(
+                messageTid, configurationDiscovery->getConfigurations());
         default:
             error("Get invalid file io type, FILEIOTYPE={FILEIOTYPE}",
                   "FILEIOTYPE", fileIOType);
@@ -81,4 +85,78 @@ Response FileIOHandler::writeFileIO(pldm_tid_t tid, const pldm_msg* request,
     return ccOnlyResponse(request, rc);
 }
 
+Response FileIOHandler::readFileIO(pldm_tid_t tid, const pldm_msg* request,
+                                   size_t payloadLength)
+{
+    int rc;
+    struct pldm_oem_meta_file_io_read_req request_msg = {};
+    request_msg.version = sizeof(struct pldm_oem_meta_file_io_read_req);
+
+    rc = decode_oem_meta_file_io_read_req(request, payloadLength, &request_msg);
+
+    if (rc != 0)
+    {
+        error("Failed to decode OEM read file IO request, rc={RC}", "RC", rc);
+        return ccOnlyResponse(request, rc);
+    }
+
+    auto handler = getHandlerByType(tid, request_msg.handle);
+
+    if (!handler)
+    {
+        return ccOnlyResponse(request, PLDM_ERROR_UNSUPPORTED_PLDM_CMD);
+    }
+
+    size_t encoderesplen = PLDM_OEM_META_FILE_IO_READ_RESP_MIN_SIZE;
+    if (request_msg.option == PLDM_OEM_META_FILE_IO_READ_ATTR)
+    {
+        encoderesplen += PLDM_OEM_META_FILE_IO_READ_ATTR_INFO_LENGTH;
+    }
+    else
+    {
+        encoderesplen += PLDM_OEM_META_FILE_IO_READ_DATA_INFO_LENGTH;
+    }
+
+    std::vector<uint8_t> respbuf(
+        sizeof(struct pldm_oem_meta_file_io_read_resp) + request_msg.length);
+    auto* response_msg = new (respbuf.data()) pldm_oem_meta_file_io_read_resp;
+
+    response_msg->version = sizeof(struct pldm_oem_meta_file_io_read_resp);
+    response_msg->handle = request_msg.handle;
+    response_msg->option = request_msg.option;
+    response_msg->length = request_msg.length;
+
+    if (response_msg->option != PLDM_OEM_META_FILE_IO_READ_ATTR)
+    {
+        response_msg->info.data.transferFlag =
+            request_msg.info.data.transferFlag;
+        response_msg->info.data.offset = request_msg.info.data.offset;
+    }
+
+    rc = handler->read(response_msg);
+
+    if (rc != PLDM_SUCCESS)
+    {
+        return ccOnlyResponse(request, rc);
+    }
+
+    response_msg->completion_code = PLDM_SUCCESS;
+    encoderesplen += response_msg->length;
+
+    Response response(sizeof(pldm_msg_hdr) + encoderesplen, 0);
+    auto responseMsg = new (response.data()) pldm_msg;
+
+    rc = encode_oem_meta_file_io_read_resp(
+        request->hdr.instance_id, response_msg,
+        sizeof(struct pldm_oem_meta_file_io_read_resp) + response_msg->length,
+        responseMsg, encoderesplen);
+
+    if (rc != 0)
+    {
+        return ccOnlyResponse(request, rc);
+    }
+
+    return response;
+}
+
 } // namespace pldm::responder::oem_meta
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io.hpp b/oem/meta/libpldmresponder/oem_meta_file_io.hpp
index 6dd34c0..3f5e216 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io.hpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io.hpp
@@ -28,6 +28,12 @@ class FileIOHandler : public CmdHandler
                    size_t payloadLength) {
                 return this->writeFileIO(tid, request, payloadLength);
             });
+        handlers.emplace(
+            PLDM_OEM_META_FILE_IO_CMD_READ_FILE,
+            [this](pldm_tid_t tid, const pldm_msg* request,
+                   size_t payloadLength) {
+                return this->readFileIO(tid, request, payloadLength);
+            });
     }
 
   private:
@@ -42,6 +48,17 @@ class FileIOHandler : public CmdHandler
     Response writeFileIO(pldm_tid_t tid, const pldm_msg* request,
                          size_t payloadLength);
 
+    /** @brief Handler for readFileIO command
+     *
+     *  @param[in] tid - the device tid
+     *  @param[in] request - pointer to PLDM request payload
+     *  @param[in] payloadLength - length of the message
+     *
+     *  @return PLDM response message
+     */
+    Response readFileIO(pldm_tid_t tid, const pldm_msg* request,
+                        size_t payloadLength);
+
     std::unique_ptr<FileHandler>
         getHandlerByType(pldm_tid_t tid, uint8_t fileIOType);
 
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
index bdd5fce..89d3385 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
@@ -21,6 +21,7 @@ enum pldm_oem_meta_file_io_type : uint8_t
     POST_CODE = 0x00,
     BIOS_VERSION = 0x01,
     POWER_CONTROL = 0x02,
+    HTTP_BOOT = 0x03,
     APML_ALERT = 0x04,
     EVENT_LOG = 0x05,
 };
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.cpp b/oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.cpp
new file mode 100644
index 0000000..4195cea
--- /dev/null
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.cpp
@@ -0,0 +1,165 @@
+#include "oem_meta_file_io_type_http_boot.hpp"
+
+#include <fcntl.h>
+#include <libpldm/oem/meta/file_io.h>
+#include <sys/stat.h>
+
+#include <phosphor-logging/lg2.hpp>
+
+#include <fstream>
+#include <utility>
+
+PHOSPHOR_LOG2_USING;
+
+namespace pldm::responder::oem_meta
+{
+
+constexpr uint8_t HTTP_BOOT_ATTR_REQ_DATA_LEN = 0;
+
+static constexpr auto certificationfilepath = "/mnt/data/host/bios-rootcert";
+
+int HttpBootHandler::read(struct pldm_oem_meta_file_io_read_resp* data)
+{
+    if (data == nullptr)
+    {
+        error("Input data pointer is NULL");
+        return PLDM_ERROR;
+    }
+
+    if (access(certificationfilepath, F_OK) == -1)
+    {
+        error("Failed to find Http boot certification file");
+        return PLDM_ERROR;
+    }
+
+    int fd = open(certificationfilepath, O_RDONLY);
+    if (fd < 0)
+    {
+        error("Failed to open Http boot certification file");
+        return PLDM_ERROR;
+    }
+
+    struct stat sb;
+    if (fstat(fd, &sb) == -1)
+    {
+        error("Failed to get Http boot certification file size");
+        return PLDM_ERROR;
+    }
+
+    uint8_t read_length = data->length;
+    switch (data->option)
+    {
+        case PLDM_OEM_META_FILE_IO_READ_ATTR:
+        {
+            if (read_length != HTTP_BOOT_ATTR_REQ_DATA_LEN)
+            {
+                error(
+                    "Invalid request data length for http boot attribute, option={OPTION}, data size={SIZE}",
+                    "OPTION", data->option, "SIZE", read_length);
+                return PLDM_ERROR;
+            }
+
+            if (sb.st_size == 0)
+            {
+                data->info.attr.size = 0;
+                data->info.attr.crc32 = 0;
+                return PLDM_SUCCESS;
+            }
+
+            uint8_t* buffer = (uint8_t*)malloc(sb.st_size);
+            if (buffer == nullptr)
+            {
+                error(
+                    "Failed to allocate buffer for http boot, length={LENGTH}",
+                    "LENGTH", sb.st_size);
+                return PLDM_ERROR;
+            }
+
+            int ret = ::read(fd, buffer, sb.st_size);
+            if (ret < 0)
+            {
+                error("Failed to read all Http boot certification file");
+                free(buffer);
+                return PLDM_ERROR;
+            }
+
+            uint32_t checksum = crc32(buffer, sb.st_size);
+            free(buffer);
+
+            data->info.attr.size = sb.st_size;
+            data->info.attr.crc32 = checksum;
+            return PLDM_SUCCESS;
+        }
+        break;
+        case PLDM_OEM_META_FILE_IO_READ_DATA:
+        {
+            if (sb.st_size == 0)
+            {
+                data->length = 0;
+                data->info.data.transferFlag = PLDM_END;
+                data->info.data.offset = 0;
+                return PLDM_SUCCESS;
+            }
+
+            uint8_t transferFlag = data->info.data.transferFlag;
+            uint16_t offset = data->info.data.offset;
+
+            int ret = lseek(fd, offset, SEEK_SET);
+            if (ret < 0)
+            {
+                error(
+                    "Failed to lseek at offset={OFFSET} of length={LENGTH} on Http boot certification file",
+                    "OFFSET", offset, "LENGTH", read_length);
+                return PLDM_ERROR;
+            }
+
+            if (offset + read_length >= sb.st_size)
+            {
+                transferFlag = PLDM_END;
+                read_length = sb.st_size - offset; // Revise length
+            }
+            else
+            {
+                transferFlag = PLDM_MIDDLE;
+            }
+
+            uint8_t* buffer = (uint8_t*)malloc(read_length);
+            if (buffer == nullptr)
+            {
+                error(
+                    "Failed to allocate buffer for http boot, length={LENGTH}",
+                    "LENGTH", read_length);
+                return PLDM_ERROR;
+            }
+
+            ret = ::read(fd, buffer, read_length);
+            if (ret < 0)
+            {
+                error(
+                    "Failed to read file content at offset={OFFSET} of length={LENGTH} on Http boot certification file",
+                    "OFFSET", offset, "LENGTH", read_length);
+                free(buffer);
+                return PLDM_ERROR;
+            }
+
+            memcpy(pldm_oem_meta_file_io_read_resp_data(data), buffer,
+                   read_length);
+            free(buffer);
+
+            offset = offset + read_length;
+
+            data->length = read_length;
+            data->info.data.transferFlag = transferFlag;
+            data->info.data.offset = offset;
+
+            return PLDM_SUCCESS;
+        }
+        break;
+        default:
+            error("Get invalid http boot option, option={OPTION}", "OPTION",
+                  data->option);
+            return PLDM_ERROR;
+    }
+}
+
+} // namespace pldm::responder::oem_meta
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.hpp
new file mode 100644
index 0000000..176f7c6
--- /dev/null
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_type_http_boot.hpp
@@ -0,0 +1,41 @@
+#pragma once
+
+#include "common/utils.hpp"
+#include "oem_meta_file_io_by_type.hpp"
+#include "requester/configuration_discovery_handler.hpp"
+
+namespace pldm::responder::oem_meta
+{
+/** @class PostCodeHandler
+ *
+ *  @brief Inherits and implements FileHandler. This class is used
+ *  to store incoming postcode
+ */
+class HttpBootHandler : public FileHandler
+{
+  public:
+    HttpBootHandler(pldm_tid_t tid,
+                    const std::map<std::string, MctpEndpoint>& configurations) :
+        tid(tid),
+        configurations(configurations)
+    {}
+
+    ~HttpBootHandler() = default;
+
+    int read(struct pldm_oem_meta_file_io_read_resp* data);
+
+    int write(const message& data)
+    {
+        (void)data; // Unused
+        return PLDM_ERROR_UNSUPPORTED_PLDM_CMD;
+    }
+
+  private:
+    /** @brief The terminus ID of the message source*/
+    pldm_tid_t tid = 0;
+
+    /** @brief Get existing configurations with MctpEndpoint*/
+    const std::map<configDbusPath, MctpEndpoint>& configurations;
+};
+
+} // namespace pldm::responder::oem_meta
-- 
2.44.2

