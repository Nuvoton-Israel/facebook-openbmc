From 5ef64f0f6412c86ebfdd0ab25df64c32aa4b7c18 Mon Sep 17 00:00:00 2001
From: Bright Cheng <bright_cheng@wiwynn.com>
Date: Wed, 26 Jun 2024 14:25:18 +0800
Subject: [PATCH 09/13] Support OEM-META command for Event Logs from BIC

Summary:
  - Add handler for write-file command "EVENT_LOG", which is sent
when host events are triggered, parse event type from a list and
add SEL in BMC.
---
 libpldmresponder/meson.build                  |   1 +
 .../libpldmresponder/oem_meta_file_io.cpp     |   4 +
 .../oem_meta_file_io_by_type.hpp              |   1 +
 .../oem_meta_file_io_type_event_log.cpp       | 138 ++++++++++++++++++
 .../oem_meta_file_io_type_event_log.hpp       |  59 ++++++++
 5 files changed, 203 insertions(+)
 create mode 100644 oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.cpp
 create mode 100644 oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.hpp

diff --git a/libpldmresponder/meson.build b/libpldmresponder/meson.build
index 55d73b0..348cbf1 100644
--- a/libpldmresponder/meson.build
+++ b/libpldmresponder/meson.build
@@ -72,6 +72,7 @@ if get_option('oem-meta').allowed()
     '../oem/meta/libpldmresponder/oem_meta_file_io.cpp',
     '../oem/meta/libpldmresponder/oem_meta_file_io_type_post_code.cpp',
     '../oem/meta/libpldmresponder/oem_meta_file_io_type_bios_version.cpp',
+    '../oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.cpp',
   ]
 endif
 
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io.cpp b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
index db75683..d90600b 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io.cpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io.cpp
@@ -1,6 +1,7 @@
 #include "oem_meta_file_io.hpp"
 
 #include "oem_meta_file_io_type_bios_version.hpp"
+#include "oem_meta_file_io_type_event_log.hpp"
 #include "oem_meta_file_io_type_post_code.hpp"
 #include "xyz/openbmc_project/Common/error.hpp"
 
@@ -27,6 +28,9 @@ std::unique_ptr<FileHandler> FileIOHandler::getHandlerByType(uint8_t messageTid,
             return std::make_unique<BIOSVersionHandler>(
                 messageTid, configurationDiscovery->getConfigurations(),
                 dBusIntf);
+        case EVENT_LOG:
+            return std::make_unique<EventLogHandler>(
+                messageTid, configurationDiscovery->getConfigurations());
         default:
             error("Get invalid file io type, FILEIOTYPE={FILEIOTYPE}",
                   "FILEIOTYPE", fileIOType);
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
index 091408f..29a4fa3 100644
--- a/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_by_type.hpp
@@ -18,6 +18,7 @@ enum pldm_oem_meta_file_io_type : uint8_t
 {
     POST_CODE = 0x00,
     BIOS_VERSION = 0x01,
+    EVENT_LOG = 0x05,
 };
 
 class FileHandler
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.cpp b/oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.cpp
new file mode 100644
index 0000000..37ec22c
--- /dev/null
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.cpp
@@ -0,0 +1,138 @@
+#include "oem_meta_file_io_type_event_log.hpp"
+
+#include <phosphor-logging/lg2.hpp>
+
+#include <utility>
+
+PHOSPHOR_LOG2_USING;
+namespace pldm::responder::oem_meta
+{
+
+void EventLogHandler::parseObjectPathToGetSlot(uint64_t& slotNum)
+{
+    static constexpr auto slotInterface =
+        "xyz.openbmc_project.Inventory.Decorator.Slot";
+    static constexpr auto slotNumberProperty = "SlotNumber";
+
+    std::vector<std::string> slotInterfaceList = {slotInterface};
+    pldm::utils::GetAncestorsResponse response;
+    bool found = false;
+
+    for (const auto& [configDbusPath, mctpEndpoint] : configurations)
+    {
+        if (mctpEndpoint.EndpointId == tid)
+        {
+            try
+            {
+                response = pldm::utils::DBusHandler().getAncestors(
+                    configDbusPath.c_str(), slotInterfaceList);
+            }
+            catch (const sdbusplus::exception_t& e)
+            {
+                error(
+                    "GetAncestors call failed with, ERROR={ERROR} PATH={PATH} INTERFACE={INTERFACE}",
+                    "ERROR", e, "PATH", configDbusPath.c_str(), "INTERFACE",
+                    slotInterface);
+            }
+
+            // It should be only one of the slot property existed.
+            if (response.size() != 1)
+            {
+                error("Get invalide number of slot property, SIZE={SIZE}",
+                      "SIZE", response.size());
+                return;
+            }
+
+            try
+            {
+                slotNum = pldm::utils::DBusHandler().getDbusProperty<uint64_t>(
+                    std::get<0>(response.front()).c_str(), slotNumberProperty,
+                    slotInterface);
+                found = true;
+            }
+            catch (const sdbusplus::exception_t& e)
+            {
+                error(
+                    "Error getting Names property, ERROR={ERROR} PATH={PATH} INTERFACE={INTERFACE}",
+                    "ERROR", e, "PATH", std::get<0>(response.front()).c_str(),
+                    "INTERFACE", slotInterface);
+            }
+        }
+    }
+
+    if (!found)
+    {
+        throw std::invalid_argument("Configuration of TID not found.");
+    }
+}
+
+int EventLogHandler::write(const message& eventData)
+{
+    static constexpr auto eventList = std::to_array({
+        " CPU Thermal Trip",
+        " HSC OCP",
+        " P12V_STBY UV",
+        " PMALERT Assertion",
+        " FAST_PROCHOT Assertion",
+        " FRB3 Timer Expired",
+        " Power-On Sequence Failure",
+        " DIMM PMIC Error",
+        " ADDC dump",
+        " BMC comes out of cold reset",
+        " BIOS FRB2 Watchdog Timer Expired",
+        " BIC Power Failure",
+        " CPU Power Failure",
+        " v-boot Failure",
+        " BMC is requested to reboot",
+        " Chassis power on is initiated by NIC insertion",
+        " Blade is powered cycle by blade button",
+        " Chassis is powered cycle by sled button",
+        " HSC Fault",
+        " SYS Throttle",
+        " VR Fault",
+        " System Management Error",
+        " Post-Completed",
+        " Fan Error",
+        " HDT_PRSNT Assertion",
+        " PLTRST Assertion",
+        " APML_ALERT Assertion",
+    });
+
+    /* 1. Get host slot number */
+    uint64_t slot;
+
+    try
+    {
+        parseObjectPathToGetSlot(slot);
+    }
+    catch (const std::exception& e)
+    {
+        error("Fail to get the corresponding slot. TID={TID}, ERROR={ERROR}",
+              "TID", tid, "ERROR", e);
+        return PLDM_ERROR;
+    }
+
+    /* 2. Map event from list */
+    std::string errorLog;
+    uint8_t eventType = eventData[0];
+    uint8_t eventStatus = eventData[1];
+
+    if (eventStatus == EVENT_ASSERTED)
+    {
+        errorLog = "Event: Host" + std::to_string(slot) + eventList[eventType] +
+                   ", ASSERTED";
+    }
+    else if (eventStatus == EVENT_DEASSERTED)
+    {
+        errorLog = "Event: Host" + std::to_string(slot) + eventList[eventType] +
+                   ", DEASSERTED";
+    }
+
+    /* 3. Add SEL and journal */
+    lg2::error("{ERROR}", "ERROR", errorLog);   // Create log in journal
+    pldm::utils::reportError(errorLog.c_str()); // Create log on Dbus
+
+    return PLDM_SUCCESS;
+}
+
+} // namespace pldm::responder::oem_meta
diff --git a/oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.hpp b/oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.hpp
new file mode 100644
index 0000000..6b75ca7
--- /dev/null
+++ b/oem/meta/libpldmresponder/oem_meta_file_io_type_event_log.hpp
@@ -0,0 +1,59 @@
+#pragma once
+
+#include "common/utils.hpp"
+#include "oem_meta_file_io_by_type.hpp"
+#include "requester/configuration_discovery_handler.hpp"
+
+namespace pldm::responder::oem_meta
+{
+enum eventAssert : uint8_t
+{
+    EVENT_DEASSERTED = 0x00,
+    EVENT_ASSERTED = 0x01,
+};
+
+/** @class EventLogHandler
+ *
+ *  @brief Inherits and implements FileHandler. This class is used
+ *  to parse Event logs from BIC and add SEL
+ */
+class EventLogHandler : public FileHandler
+{
+  public:
+    EventLogHandler(pldm_tid_t tid,
+                    const std::map<std::string, MctpEndpoint>& configurations) :
+        tid(tid),
+        configurations(configurations)
+    {}
+
+    ~EventLogHandler() = default;
+
+    /** @brief Method to parse event log from eventList
+     *  @param[in] data - eventData
+     *  @return  PLDM status code
+     */
+    int write(const message& data);
+
+    /** @brief Method to read event log from BIC
+     *  @param[in] data - eventData
+     *  @return  PLDM status code
+     */
+    int read(const message&)
+    {
+        return PLDM_ERROR_UNSUPPORTED_PLDM_CMD;
+    }
+
+  private:
+    /** @brief Parse object path to get correspond slot number
+     *  @param[in] slot - slot number
+     */
+    void parseObjectPathToGetSlot(uint64_t& slot);
+
+    /** @brief The terminus ID of the message source*/
+    pldm_tid_t tid = 0;
+
+    /** @brief Get existing configurations with MctpEndpoint*/
+    const std::map<configDbusPath, MctpEndpoint>& configurations;
+};
+
+} // namespace pldm::responder::oem_meta
-- 
2.43.5

