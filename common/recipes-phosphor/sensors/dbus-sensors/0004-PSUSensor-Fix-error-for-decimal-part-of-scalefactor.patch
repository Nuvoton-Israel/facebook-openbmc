From 877fe88eb3ac56b78439637ad5b1645316d9e16f Mon Sep 17 00:00:00 2001
From: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
Date: Fri, 22 Sep 2023 09:43:49 +0800
Subject: [PATCH 4/5] PSUSensor: Fix error for decimal part of scalefactor

Customized scale factor declaration from schema in entity-manager,
declared as type "number." If a number is used in PSUSensor, it loses
the decimal part when transforming the value from variant to unsigned
int, resulting in incorrect calculations.

For example, a sensor named "ADC_TEST" is set as below:

{
    "Address": 31,
    "Bus": 31,
    "Labels": [
        "in6"
    ],
    "Name": "FANBOARD_ADC",
    "Type": "ADC128D818",
    "in6_Name": "ADC_TEST",
    "in6_Scale": 31.9458
}

but scale factor in debug print is 31, not 31.9458:

Jul 28 22:50:36 bmc psusensor[788]: DEBUG_FACTOR:31

The more reasonable way to resolve the issue is to use a variant to
float or double, as adcsensor has been doing so far.

Tested:
Get adc128d818 and ina233 reading from PSUSensor by dbus introspect

Change-Id: If3692ab6b0c790072064a44001e9ef58cb50024c
Signed-off-by: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
---
 src/PSUSensor.cpp     | 21 +++++++++++----------
 src/PSUSensor.hpp     |  8 ++++----
 src/PSUSensorMain.cpp | 15 ++++++++++-----
 3 files changed, 25 insertions(+), 19 deletions(-)

diff --git a/src/PSUSensor.cpp b/src/PSUSensor.cpp
index 9786105..3d1c3e6 100644
--- a/src/PSUSensor.cpp
+++ b/src/PSUSensor.cpp
@@ -44,16 +44,17 @@ static constexpr const char* sensorPathPrefix = "/xyz/openbmc_project/sensors/";
 
 static constexpr bool debug = false;
 
-PSUSensor::PSUSensor(
-    const std::string& path, const std::string& objectType,
-    sdbusplus::asio::object_server& objectServer,
-    std::shared_ptr<sdbusplus::asio::connection>& conn,
-    boost::asio::io_context& io, const std::string& sensorName,
-    std::vector<thresholds::Threshold>&& thresholdsIn,
-    const std::string& sensorConfiguration, const PowerState& powerState,
-    const std::string& sensorUnits, unsigned int factor, double max, double min,
-    double offset, const std::string& label, size_t tSize, double pollRate,
-    const std::shared_ptr<I2CDevice>& i2cDevice) :
+PSUSensor::PSUSensor(const std::string& path, const std::string& objectType,
+                     sdbusplus::asio::object_server& objectServer,
+                     std::shared_ptr<sdbusplus::asio::connection>& conn,
+                     boost::asio::io_context& io, const std::string& sensorName,
+                     std::vector<thresholds::Threshold>&& thresholdsIn,
+                     const std::string& sensorConfiguration,
+                     const PowerState& powerState,
+                     const std::string& sensorUnits, double factor, double max,
+                     double min, double offset, const std::string& label,
+                     size_t tSize, double pollRate,
+                     const std::shared_ptr<I2CDevice>& i2cDevice) :
     Sensor(escapeName(sensorName), std::move(thresholdsIn), sensorConfiguration,
            objectType, false, false, max, min, conn, powerState),
     i2cDevice(i2cDevice), objServer(objectServer),
diff --git a/src/PSUSensor.hpp b/src/PSUSensor.hpp
index 008c632..cebe730 100644
--- a/src/PSUSensor.hpp
+++ b/src/PSUSensor.hpp
@@ -23,7 +23,7 @@ class PSUSensor : public Sensor, public std::enable_shared_from_this<PSUSensor>
               std::vector<thresholds::Threshold>&& thresholds,
               const std::string& sensorConfiguration,
               const PowerState& powerState, const std::string& sensorUnits,
-              unsigned int factor, double max, double min, double offset,
+              double factor, double max, double min, double offset,
               const std::string& label, size_t tSize, double pollRate,
               const std::shared_ptr<I2CDevice>& i2cDevice);
     ~PSUSensor() override;
@@ -47,7 +47,7 @@ class PSUSensor : public Sensor, public std::enable_shared_from_this<PSUSensor>
     boost::asio::random_access_file inputDev;
     boost::asio::steady_timer waitTimer;
     std::string path;
-    unsigned int sensorFactor;
+    double sensorFactor;
     double sensorOffset;
     thresholds::ThresholdTimer thresholdTimer;
     void restartRead();
@@ -66,7 +66,7 @@ class PSUSensor : public Sensor, public std::enable_shared_from_this<PSUSensor>
 class PSUProperty
 {
   public:
-    PSUProperty(std::string name, double max, double min, unsigned int factor,
+    PSUProperty(std::string name, double max, double min, double factor,
                 double offset) :
         labelTypeName(std::move(name)), maxReading(max), minReading(min),
         sensorScaleFactor(factor), sensorOffset(offset)
@@ -76,6 +76,6 @@ class PSUProperty
     std::string labelTypeName;
     double maxReading;
     double minReading;
-    unsigned int sensorScaleFactor;
+    double sensorScaleFactor;
     double sensorOffset;
 };
diff --git a/src/PSUSensorMain.cpp b/src/PSUSensorMain.cpp
index 1e83c9b..71c057d 100644
--- a/src/PSUSensorMain.cpp
+++ b/src/PSUSensorMain.cpp
@@ -708,7 +708,7 @@ static void createSensorsCallback(
                 try
                 {
                     psuProperty.sensorScaleFactor = std::visit(
-                        VariantToUnsignedIntVisitor(), findCustomScale->second);
+                        VariantToDoubleVisitor(), findCustomScale->second);
                 }
                 catch (const std::invalid_argument&)
                 {
@@ -717,7 +717,8 @@ static void createSensorsCallback(
                 }
 
                 // Avoid later division by zero
-                if (psuProperty.sensorScaleFactor > 0)
+                if (psuProperty.sensorScaleFactor != 0.0 &&
+                    std::isfinite(psuProperty.sensorScaleFactor))
                 {
                     customizedScale = true;
                 }
@@ -841,7 +842,7 @@ static void createSensorsCallback(
             // Similarly, if sensor scaling factor is being customized,
             // then the below power-of-10 constraint becomes unnecessary,
             // as config should be able to specify an arbitrary divisor.
-            unsigned int factor = psuProperty.sensorScaleFactor;
+            double factor = psuProperty.sensorScaleFactor;
             if (!customizedScale)
             {
                 // Preserve existing usage of hardcoded labelMatch table below
@@ -858,8 +859,12 @@ static void createSensorsCallback(
                 auto findScaleFactor = baseConfig->find(strScaleFactor);
                 if (findScaleFactor != baseConfig->end())
                 {
-                    factor = std::visit(VariantToIntVisitor(),
-                                        findScaleFactor->second);
+                    double newFactor = std::visit(VariantToDoubleVisitor(),
+                                                  findScaleFactor->second);
+                    if (newFactor != 0.0 && std::isfinite(newFactor))
+                    {
+                        factor = newFactor;
+                    }
                 }
 
                 if constexpr (debug)
-- 
2.44.2

