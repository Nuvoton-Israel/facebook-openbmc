From 6130640eaef7c13b41b20595a5f96e384e2ff367 Mon Sep 17 00:00:00 2001
From: Marco Kawajiri <kawajiri@meta.com>
Date: Fri, 19 Jul 2024 16:07:49 -0700
Subject: [PATCH] mutual-tls-meta: Support "svc" and "host" entity types

---
 http/mutual_tls.hpp           |  2 +-
 http/mutual_tls_meta.hpp      | 64 ++++++++++++++++++++++++++++-------
 test/http/mutual_tls_meta.cpp | 35 ++++++++++++++++---
 3 files changed, 83 insertions(+), 18 deletions(-)

diff --git a/http/mutual_tls.hpp b/http/mutual_tls.hpp
index eb26b5a..919b515 100644
--- a/http/mutual_tls.hpp
+++ b/http/mutual_tls.hpp
@@ -36,7 +36,7 @@ inline std::string getUsernameFromCommonName(std::string_view commonName)
         case persistent_data::MTLSCommonNameParseMode::Meta:
         {
             // Meta Inc. CommonName parsing
-            std::optional<std::string_view> sslUserMeta =
+            std::optional<std::string> sslUserMeta =
                 mtlsMetaParseSslUser(commonName);
             if (!sslUserMeta)
             {
diff --git a/http/mutual_tls_meta.hpp b/http/mutual_tls_meta.hpp
index 5e55db8..3381dd4 100644
--- a/http/mutual_tls_meta.hpp
+++ b/http/mutual_tls_meta.hpp
@@ -7,17 +7,17 @@
 #include <string>
 #include <string_view>
 
-inline std::optional<std::string_view>
-    mtlsMetaParseSslUser(std::string_view sslUser)
+inline std::optional<std::string> mtlsMetaParseSslUser(std::string_view sslUser)
 {
     // Parses a Meta internal TLS client certificate Subject CN in
-    // '<entityType>:<entity>[/<hostname>]' format and returns the resulting
-    // POSIX-compatible local user name on success, null otherwise.
-    //
-    // Only entityType = "user" is supported for now.
+    // '<entityType>:<entity>[/<hostname>]' format and returns the
+    // resulting POSIX-compatible local user name on success, null otherwise.
     //
     // Example client subject CN -> local user name:
-    // "user:a_username/hostname" -> "a_username"
+    // "user:a_username/hostname" -> "user_a_username"
+    // "svc:an_internal_service_name" -> "svc_an_internal_service_name"
+    // "host:/hostname.facebook.com" -> "host_hostname" (note the stripped
+    // hostname suffix)
 
     // Parse entityType
     size_t colonIndex = sslUser.find(':');
@@ -30,16 +30,17 @@ inline std::optional<std::string_view>
 
     std::string_view entityType = sslUser.substr(0, colonIndex);
     sslUser.remove_prefix(colonIndex + 1);
-    if (entityType != "user")
+    if (entityType != "user" && entityType != "svc" && entityType != "host")
     {
         BMCWEB_LOG_WARNING(
-            "Invalid/unsupported entityType='{}' in Meta TLS client cert Subject CN: '{}'",
+            "Invalid entityType='{}' in Meta TLS client cert Subject CN: '{}'",
             entityType, sslUser);
         return std::nullopt;
     }
 
-    // Parse entity
+    // Parse entity and hostname
     size_t slashIndex = sslUser.find('/');
+    std::string_view hostname;
     std::string_view entity;
     if (slashIndex == std::string_view::npos)
     {
@@ -60,14 +61,53 @@ inline std::optional<std::string_view>
                 entity, sslUser);
             return std::nullopt;
         }
+
+        // Parse hostname
+        hostname = sslUser;
+        bool foundHost = false;
+        // Remove host suffix (they're not used to uniquely identify hosts
+        // and we avoid problems with overly long entitys)
+        for (std::string_view suffix :
+             {".facebook.com", ".tfbnw.net", ".thefacebook.com"})
+        {
+            if (hostname.ends_with(suffix))
+            {
+                hostname.remove_suffix(suffix.size());
+                foundHost = true;
+                break;
+            }
+        }
+        if (!foundHost)
+        {
+            BMCWEB_LOG_WARNING(
+                "Invalid hostname suffix in hostname='{}'. Meta TLS client cert Subject CN: '{}'",
+                hostname, sslUser);
+            return std::nullopt;
+        }
+
+        if (hostname.find_first_not_of(
+                "abcdefghijklmnopqrstuvwxyz0123456789_-.") != std::string::npos)
+        {
+            BMCWEB_LOG_WARNING(
+                "Invalid hostname='{}' in Meta TLS client cert Subject CN: '{}'",
+                hostname, sslUser);
+            return std::nullopt;
+        }
+    }
+
+    // Use the hostname as entity if entityType == "host"
+    // e.g. "host:/hostname.facebook.com" -> "host_hostname"
+    if (entityType == "host")
+    {
+        entity = hostname;
     }
 
-    if (entity.empty())
+    if (entityType.empty() || entity.empty())
     {
         BMCWEB_LOG_DEBUG("Invalid Meta TLS client cert Subject CN: '{}'",
                          sslUser);
         return std::nullopt;
     }
 
-    return entity;
+    return std::format("{}_{}", entityType, entity);
 }
diff --git a/test/http/mutual_tls_meta.cpp b/test/http/mutual_tls_meta.cpp
index 0e280c1..dc214d8 100644
--- a/test/http/mutual_tls_meta.cpp
+++ b/test/http/mutual_tls_meta.cpp
@@ -14,14 +14,35 @@ namespace
 TEST(MetaParseSslUser, userTest)
 {
     std::string sslUser = "user:kawajiri/hostname.facebook.com";
-    EXPECT_EQ(mtlsMetaParseSslUser(sslUser), "kawajiri");
+    EXPECT_EQ(mtlsMetaParseSslUser(sslUser), "user_kawajiri");
 }
 
-TEST(MetaParseSslUser, userNohostnameTest)
+TEST(MetaParseSslUser, svcTest)
 {
-    // hostname is optional
-    std::string sslUser = "user:kawajiri";
-    EXPECT_EQ(mtlsMetaParseSslUser(sslUser), "kawajiri");
+    std::string sslUser = "svc:an_internal.service";
+    EXPECT_EQ(mtlsMetaParseSslUser(sslUser), "svc_an_internal.service");
+}
+
+TEST(MetaParseSslUser, hostTest)
+{
+    std::string sslUser = "host:/ab12345.cd0.facebook.com";
+
+    EXPECT_EQ(mtlsMetaParseSslUser(sslUser), "host_ab12345.cd0");
+}
+
+TEST(MetaParseSslUser, hostTestSuffixes)
+{
+    std::vector<std::string> sslUsers = {
+        "host:/hostname.facebook.com",
+        "host:/hostname.tfbnw.net",
+        "host:/hostname.thefacebook.com",
+    };
+
+    for (const std::string& sslUser : sslUsers)
+    {
+        // Must strip suffix
+        EXPECT_EQ(mtlsMetaParseSslUser(sslUser), "host_hostname");
+    }
 }
 
 TEST(MetaParseSslUser, invalidUsers)
@@ -35,7 +56,11 @@ TEST(MetaParseSslUser, invalidUsers)
         "user:/",
         "user:/hostname.facebook.com",
         "user:/hostname.facebook.c om",
+        "user:a/hostname.facebook.c om",
+        "user:a//hostname.facebook.com",
+        "user:username/hostname.notfacebook.com",
         "user: space/hostname.facebook.com",
+        "user:space/hostname.facebook.com ",
         "svc:",
         "svc:/",
         "svc:/hostname.facebook.com",
-- 
2.43.0

