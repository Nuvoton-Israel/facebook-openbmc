From 0638b7ba7dbcbbaafd6e930da6843a01c20a2a2f Mon Sep 17 00:00:00 2001
From: Marco Kawajiri <kawajiri@meta.com>
Date: Mon, 19 Feb 2024 09:08:57 -0800
Subject: [PATCH] mutual-tls: Add support for svc and host identity types

Summary:

Test Plan:

Reviewers:

Subscribers:

Tasks:

Tags:
Change-Id: I710c878314e2aff0124bb7fc5938eb39e72191e3
---
 http/mutual_tls_meta.hpp | 64 ++++++++++++++++++++++++++++++++--------
 1 file changed, 52 insertions(+), 12 deletions(-)

diff --git a/http/mutual_tls_meta.hpp b/http/mutual_tls_meta.hpp
index 5e55db8e..3381dd48 100644
--- a/http/mutual_tls_meta.hpp
+++ b/http/mutual_tls_meta.hpp
@@ -7,17 +7,17 @@
 #include <string>
 #include <string_view>

-inline std::optional<std::string_view>
-    mtlsMetaParseSslUser(std::string_view sslUser)
+inline std::optional<std::string> mtlsMetaParseSslUser(std::string_view sslUser)
 {
     // Parses a Meta internal TLS client certificate Subject CN in
-    // '<entityType>:<entity>[/<hostname>]' format and returns the resulting
-    // POSIX-compatible local user name on success, null otherwise.
-    //
-    // Only entityType = "user" is supported for now.
+    // '<entityType>:<entity>[/<hostname>]' format and returns the
+    // resulting POSIX-compatible local user name on success, null otherwise.
     //
     // Example client subject CN -> local user name:
-    // "user:a_username/hostname" -> "a_username"
+    // "user:a_username/hostname" -> "user_a_username"
+    // "svc:an_internal_service_name" -> "svc_an_internal_service_name"
+    // "host:/hostname.facebook.com" -> "host_hostname" (note the stripped
+    // hostname suffix)

     // Parse entityType
     size_t colonIndex = sslUser.find(':');
@@ -30,16 +30,17 @@ inline std::optional<std::string_view>

     std::string_view entityType = sslUser.substr(0, colonIndex);
     sslUser.remove_prefix(colonIndex + 1);
-    if (entityType != "user")
+    if (entityType != "user" && entityType != "svc" && entityType != "host")
     {
         BMCWEB_LOG_WARNING(
-            "Invalid/unsupported entityType='{}' in Meta TLS client cert Subject CN: '{}'",
+            "Invalid entityType='{}' in Meta TLS client cert Subject CN: '{}'",
             entityType, sslUser);
         return std::nullopt;
     }

-    // Parse entity
+    // Parse entity and hostname
     size_t slashIndex = sslUser.find('/');
+    std::string_view hostname;
     std::string_view entity;
     if (slashIndex == std::string_view::npos)
     {
@@ -60,14 +61,53 @@ inline std::optional<std::string_view>
                 entity, sslUser);
             return std::nullopt;
         }
+
+        // Parse hostname
+        hostname = sslUser;
+        bool foundHost = false;
+        // Remove host suffix (they're not used to uniquely identify hosts
+        // and we avoid problems with overly long entitys)
+        for (std::string_view suffix :
+             {".facebook.com", ".tfbnw.net", ".thefacebook.com"})
+        {
+            if (hostname.ends_with(suffix))
+            {
+                hostname.remove_suffix(suffix.size());
+                foundHost = true;
+                break;
+            }
+        }
+        if (!foundHost)
+        {
+            BMCWEB_LOG_WARNING(
+                "Invalid hostname suffix in hostname='{}'. Meta TLS client cert Subject CN: '{}'",
+                hostname, sslUser);
+            return std::nullopt;
+        }
+
+        if (hostname.find_first_not_of(
+                "abcdefghijklmnopqrstuvwxyz0123456789_-.") != std::string::npos)
+        {
+            BMCWEB_LOG_WARNING(
+                "Invalid hostname='{}' in Meta TLS client cert Subject CN: '{}'",
+                hostname, sslUser);
+            return std::nullopt;
+        }
+    }
+
+    // Use the hostname as entity if entityType == "host"
+    // e.g. "host:/hostname.facebook.com" -> "host_hostname"
+    if (entityType == "host")
+    {
+        entity = hostname;
     }

-    if (entity.empty())
+    if (entityType.empty() || entity.empty())
     {
         BMCWEB_LOG_DEBUG("Invalid Meta TLS client cert Subject CN: '{}'",
                          sslUser);
         return std::nullopt;
     }

-    return entity;
+    return std::format("{}_{}", entityType, entity);
 }
--
2.39.3
