From e6d372efa9cea83d4769560810c54d470ea8288a Mon Sep 17 00:00:00 2001
From: Peter Yin <peteryin.openbmc@gmail.com>
Date: Tue, 10 Dec 2024 16:01:08 +0800
Subject: [PATCH 8/8] mtd: spi: Add support for W25Q01JVSFIN For write status
 register, there exists a limitation when W25Q01JVSFIN is used. The status
 programming time of the die 1 will be longer than die 0 which will lead to
 abnormnal behavior of die 1. Thus, 50h command should be used before 01h
 command instead of 06h.

Signed-off-by: Chin-Ting Kuo <chin-ting_kuo@aspeedtech.com>
Change-Id: If83ab109f2cd0cfe718004373098583715c4b449
---
 drivers/mtd/spi-nor/core.c    | 36 +++++++++++++++++++++++++++++++++++
 drivers/mtd/spi-nor/core.h    |  9 +++++++++
 drivers/mtd/spi-nor/winbond.c |  3 ++-
 include/linux/mtd/spi-nor.h   |  1 +
 4 files changed, 48 insertions(+), 1 deletion(-)

diff --git a/drivers/mtd/spi-nor/core.c b/drivers/mtd/spi-nor/core.c
index 1b0c6770c14e..4eea9218f199 100644
--- a/drivers/mtd/spi-nor/core.c
+++ b/drivers/mtd/spi-nor/core.c
@@ -380,6 +380,35 @@ int spi_nor_write_enable(struct spi_nor *nor)
 	return ret;
 }
 
+/**
+ * spi_nor_vsr_write_enable() - Set write enable latch for volatile status register.
+ * @nor:	pointer to 'struct spi_nor'.
+ *
+ * Return: 0 on success, -errno otherwise.
+ */
+int spi_nor_vsr_write_enable(struct spi_nor *nor)
+{
+	int ret;
+
+	if (nor->spimem) {
+		struct spi_mem_op op = SPI_NOR_VSR_WREN_OP;
+
+		spi_nor_spimem_setup_op(nor, &op, nor->reg_proto);
+
+		ret = spi_mem_exec_op(nor->spimem, &op);
+	} else {
+		ret = spi_nor_controller_ops_write_reg(nor, SPINOR_OP_VSR_WREN,
+						       NULL, 0);
+	}
+
+	if (ret)
+		dev_dbg(nor->dev,
+			"error %d on Write Enable for Volatile Status Register\n",
+			ret);
+
+	return ret;
+}
+
 /**
  * spi_nor_write_disable() - Send Write Disable instruction to the chip.
  * @nor:	pointer to 'struct spi_nor'.
@@ -796,7 +825,11 @@ int spi_nor_write_sr(struct spi_nor *nor, const u8 *sr, size_t len)
 {
 	int ret;
 
+	if (nor->flags & SNOR_F_WR_VSR)
+		ret = spi_nor_vsr_write_enable(nor);
+	else
 	ret = spi_nor_write_enable(nor);
+
 	if (ret)
 		return ret;
 
@@ -2891,6 +2924,9 @@ static void spi_nor_init_fixup_flags(struct spi_nor *nor)
 
 	if (fixup_flags & SPI_NOR_IO_MODE_EN_VOLATILE)
 		nor->flags |= SNOR_F_IO_MODE_EN_VOLATILE;
+
+	if (fixup_flags & SPI_NOR_FORCE_WRITE_VOLATILE_SR)
+		nor->flags |= SNOR_F_WR_VSR;
 }
 
 /**
diff --git a/drivers/mtd/spi-nor/core.h b/drivers/mtd/spi-nor/core.h
index 9217379b9cfe..55a2ea4ec7c9 100644
--- a/drivers/mtd/spi-nor/core.h
+++ b/drivers/mtd/spi-nor/core.h
@@ -18,6 +18,12 @@
 		   SPI_MEM_OP_DUMMY(ndummy, 0),				\
 		   SPI_MEM_OP_DATA_IN(len, buf, 0))
 
+#define SPI_NOR_VSR_WREN_OP						\
+	SPI_MEM_OP(SPI_MEM_OP_CMD(SPINOR_OP_VSR_WREN, 0),		\
+		   SPI_MEM_OP_NO_ADDR,					\
+		   SPI_MEM_OP_NO_DUMMY,					\
+		   SPI_MEM_OP_NO_DATA)
+
 #define SPI_NOR_WREN_OP							\
 	SPI_MEM_OP(SPI_MEM_OP_CMD(SPINOR_OP_WREN, 0),			\
 		   SPI_MEM_OP_NO_ADDR,					\
@@ -133,6 +139,7 @@ enum spi_nor_option_flags {
 	SNOR_F_RWW		= BIT(14),
 	SNOR_F_ECC		= BIT(15),
 	SNOR_F_NO_WP		= BIT(16),
+	SNOR_F_WR_VSR		= BIT(17),
 };
 
 struct spi_nor_read_command {
@@ -435,6 +442,7 @@ struct spi_nor_fixups {
 			 const struct sfdp_bfpt *bfpt);
 	int (*post_sfdp)(struct spi_nor *nor);
 	int (*late_init)(struct spi_nor *nor);
+	void (*force_fixup)(struct spi_nor *nor);
 };
 
 /**
@@ -537,6 +545,7 @@ struct flash_info {
 	u8 fixup_flags;
 #define SPI_NOR_4B_OPCODES		BIT(0)
 #define SPI_NOR_IO_MODE_EN_VOLATILE	BIT(1)
+#define SPI_NOR_FORCE_WRITE_VOLATILE_SR	BIT(2)
 
 	u8 mfr_flags;
 
diff --git a/drivers/mtd/spi-nor/winbond.c b/drivers/mtd/spi-nor/winbond.c
index f9986add5d65..1931a38ee026 100644
--- a/drivers/mtd/spi-nor/winbond.c
+++ b/drivers/mtd/spi-nor/winbond.c
@@ -145,7 +145,8 @@ static const struct flash_info winbond_nor_parts[] = {
 		NO_SFDP_FLAGS(SECT_4K | SPI_NOR_DUAL_READ |
 			      SPI_NOR_QUAD_READ) },
 	{ "w25q01jvq", INFO(0xef4021, 0, 64 * 1024, 2048)
-		PARSE_SFDP },
+		PARSE_SFDP
+		FIXUP_FLAGS(SPI_NOR_FORCE_WRITE_VOLATILE_SR) },
 };
 
 /**
diff --git a/include/linux/mtd/spi-nor.h b/include/linux/mtd/spi-nor.h
index cdcfe0fd2e7d..2381eb14ffb5 100644
--- a/include/linux/mtd/spi-nor.h
+++ b/include/linux/mtd/spi-nor.h
@@ -21,6 +21,7 @@
 /* Flash opcodes. */
 #define SPINOR_OP_WRDI		0x04	/* Write disable */
 #define SPINOR_OP_WREN		0x06	/* Write enable */
+#define SPINOR_OP_VSR_WREN	0x50	/* Write enable for volatile register */
 #define SPINOR_OP_RDSR		0x05	/* Read status register */
 #define SPINOR_OP_WRSR		0x01	/* Write status register 1 byte */
 #define SPINOR_OP_RDSR2		0x3f	/* Read status register 2 */
-- 
2.25.1

