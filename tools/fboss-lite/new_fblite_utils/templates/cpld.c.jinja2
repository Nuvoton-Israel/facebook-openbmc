// SPDX-License-Identifier: GPL-2.0+
// Copyright (c) Meta Platforms, Inc. and affiliates.

#include <linux/device.h>
#include <linux/errno.h>
#include <linux/kernel.h>	/* for ARRAY_SIZE */
#include <linux/module.h>
#include <linux/i2c.h>
#include <linux/version.h>
#include "i2c_dev_sysfs.h"

/*
 * NOTE: ONLY export register fields that are required from user space.
 */
static const i2c_dev_attr_st {{ name }}_attrs[] = {
	{%- for attr in attributes %}
	{
		"{{ attr.name }}",
		{% if attr.help is not none -%}
		"{{ attr.help }}",
		{% else -%}
		NULL,
		{% endif -%}
		{{ "I2C_DEV_ATTR_SHOW_DEFAULT" if attr.read else "NULL" }},
		{{ "I2C_DEV_ATTR_STORE_DEFAULT" if attr.write else "NULL" }},
		0x{{ '%0x' % attr.register }},
		{{ attr.offset }},
		{{ attr.n_bits }},
	}{{ "," if not loop.last else "" }}
	{%- endfor %}
};

static const struct i2c_device_id {{ name }}_id[] = {
	{ "{{ name }}", 0 },
	{ },
};
MODULE_DEVICE_TABLE(i2c, {{ name }}_id);

#if LINUX_VERSION_CODE > KERNEL_VERSION(6, 5, 0)
static int {{ name }}_probe(struct i2c_client *client)
#else
static int {{ name }}_probe(struct i2c_client *client,
			 const struct i2c_device_id *id)
#endif
{
	i2c_dev_data_st *pdata;

	pdata = devm_kmalloc(&client->dev, sizeof(*pdata), GFP_KERNEL);
	if (pdata == NULL)
		return -ENOMEM;

	i2c_set_clientdata(client, pdata);

	return i2c_dev_sysfs_data_init(client, pdata, {{ name }}_attrs,
				       ARRAY_SIZE({{ name }}_attrs));
}

static void {{ name }}_remove(struct i2c_client *client)
{
	i2c_dev_data_st *pdata = i2c_get_clientdata(client);

	i2c_dev_sysfs_data_clean(client, pdata);
}

static struct i2c_driver {{ name }}_driver = {
	.class    = I2C_CLASS_HWMON,
	.driver = {
		.name = "{{ name }}",
	},
	.probe    = {{ name }}_probe,
	.remove   = {{ name }}_remove,
	.id_table = {{ name }}_id,
};

module_i2c_driver({{ name }}_driver);

MODULE_DESCRIPTION("FBOSS OpenBMC {{ name }} Driver");
MODULE_LICENSE("GPL");
