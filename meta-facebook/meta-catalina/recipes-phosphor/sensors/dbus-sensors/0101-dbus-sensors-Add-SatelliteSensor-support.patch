From 73af0561892cc3a37daf7cf43658461c2ff05d54 Mon Sep 17 00:00:00 2001
From: Potin Lai <potin.lai@quantatw.com>
Date: Tue, 18 Jun 2024 23:44:55 +0800
Subject: [PATCH 1/1] dbus-sensors: Add SatelliteSensor support

Add Nvidia SatelliteSensor support

Reference from below links:
https://github.com/NVIDIA/dbus-sensors/blob/e1ff2551cfeae86d42fb551953c1e1ccfe0146ac/src/SatelliteSensor.hpp
https://github.com/NVIDIA/dbus-sensors/blob/e1ff2551cfeae86d42fb551953c1e1ccfe0146ac/src/SatelliteSensor.cpp
https://github.com/NVIDIA/dbus-sensors/blob/e1ff2551cfeae86d42fb551953c1e1ccfe0146ac/service_files/xyz.openbmc_project.satellitesensor.service

Change-Id: I3b20e8538743d9a17602c0aa55ff862df30fcd70
---
 meson.build                                   |   4 +
 meson.options                                 |   1 +
 service_files/meson.build                     |   1 +
 ...yz.openbmc_project.satellitesensor.service |  14 +
 src/meson.build                               |   4 +
 src/satellite/HmcSensor.hpp                   |  91 ++++
 src/satellite/SatelliteSensor.cpp             | 474 ++++++++++++++++++
 src/satellite/SatelliteSensor.hpp             | 119 +++++
 src/satellite/meson.build                     |  14 +
 9 files changed, 722 insertions(+)
 create mode 100644 service_files/xyz.openbmc_project.satellitesensor.service
 create mode 100644 src/satellite/HmcSensor.hpp
 create mode 100644 src/satellite/SatelliteSensor.cpp
 create mode 100644 src/satellite/SatelliteSensor.hpp
 create mode 100644 src/satellite/meson.build

diff --git a/meson.build b/meson.build
index d1f1207..8e49f6d 100644
--- a/meson.build
+++ b/meson.build
@@ -49,5 +49,9 @@ default_deps = [
     uring,
 ]
 
+if get_option('satellite').enabled()
+    add_project_arguments('-DAUTO_GEN_SENSOR_HEADER', language : 'cpp')
+endif
+
 subdir('service_files')
 subdir('src')
diff --git a/meson.options b/meson.options
index d6a8b96..2c13603 100644
--- a/meson.options
+++ b/meson.options
@@ -12,3 +12,4 @@ option('external', type: 'feature', value: 'enabled', description: 'Enable Exter
 option('tests', type: 'feature', value: 'enabled', description: 'Build tests.',)
 option('validate-unsecure-feature', type : 'feature', value : 'disabled', description : 'Enables unsecure features required by validation. Note: mustbe turned off for production images.',)
 option('insecure-sensor-override', type : 'feature', value : 'disabled', description : 'Enables Sensor override feature without any check.',)
+option('satellite', type: 'feature', value: 'disabled', description: 'Enable Satellite sensor.',)
diff --git a/service_files/meson.build b/service_files/meson.build
index 20bd84a..1e7557f 100644
--- a/service_files/meson.build
+++ b/service_files/meson.build
@@ -16,6 +16,7 @@ unit_files = [
     ['nvme', 'xyz.openbmc_project.nvmesensor.service'],
     ['psu', 'xyz.openbmc_project.psusensor.service'],
     ['external', 'xyz.openbmc_project.externalsensor.service'],
+    ['satellite', 'xyz.openbmc_project.satellitesensor.service'],
 ]
 
 fs = import('fs')
diff --git a/service_files/xyz.openbmc_project.satellitesensor.service b/service_files/xyz.openbmc_project.satellitesensor.service
new file mode 100644
index 0000000..97ab9fe
--- /dev/null
+++ b/service_files/xyz.openbmc_project.satellitesensor.service
@@ -0,0 +1,14 @@
+[Unit]
+Description=Satellite Sensor
+StopWhenUnneeded=false
+Requires=xyz.openbmc_project.EntityManager.service
+After=xyz.openbmc_project.EntityManager.service
+
+[Service]
+Restart=always
+RestartSec=5
+ExecStart=/usr/bin/satellitesensor
+
+[Install]
+WantedBy=multi-user.target
+
diff --git a/src/meson.build b/src/meson.build
index 64d156d..7214602 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -120,3 +120,7 @@ endif
 if get_option('tests').allowed()
     subdir('tests')
 endif
+
+if get_option('satellite').enabled()
+    subdir('satellite')
+endif
diff --git a/src/satellite/HmcSensor.hpp b/src/satellite/HmcSensor.hpp
new file mode 100644
index 0000000..cc786e2
--- /dev/null
+++ b/src/satellite/HmcSensor.hpp
@@ -0,0 +1,91 @@
+//automatically generated table
+std::map<uint16_t, uint8_t> sensorMap = {
+    {0x19 ,4},//HGX_GPU_0_DRAM_0_Temp_0
+    {0x1D ,4},//HGX_GPU_1_DRAM_0_Temp_0
+    {0x21 ,4},//HGX_GPU_2_DRAM_0_Temp_0
+    {0x25 ,4},//HGX_GPU_3_DRAM_0_Temp_0
+    {0x29 ,4},//HGX_GPU_4_DRAM_0_Temp_0
+    {0x2D ,4},//HGX_GPU_5_DRAM_0_Temp_0
+    {0x31 ,4},//HGX_GPU_6_DRAM_0_Temp_0
+    {0x35 ,4},//HGX_GPU_7_DRAM_0_Temp_0
+    {0x4B ,4},//HGX_GPU_0_Power_0
+    {0x4F ,4},//HGX_GPU_1_Power_0
+    {0x53 ,4},//HGX_GPU_2_Power_0
+    {0x57 ,4},//HGX_GPU_3_Power_0
+    {0x5B ,4},//HGX_GPU_4_Power_0
+    {0x5f ,4},//HGX_GPU_5_Power_0
+    {0x63 ,4},//HGX_GPU_6_Power_0
+    {0x67 ,4},//HGX_GPU_7_Power_0
+    {0x6C ,4},//HGX_GPU_0_TEMP_1
+    {0x70 ,4},//HGX_GPU_1_TEMP_1
+    {0x74 ,4},//HGX_GPU_2_TEMP_1
+    {0x78 ,4},//HGX_GPU_3_TEMP_1
+    {0x7c ,4},//HGX_GPU_4_TEMP_1
+    {0x80 ,4},//HGX_GPU_5_TEMP_1
+    {0x84 ,4},//HGX_GPU_6_TEMP_1
+    {0x88 ,4},//HGX_GPU_7_TEMP_1
+    {0x8D ,8},//HGX_GPU_0_Energy_0
+    {0x95 ,8},//HGX_GPU_1_Energy_0
+    {0x9D ,8},//HGX_GPU_2_Energy_0
+    {0xA5 ,8},//HGX_GPU_3_Energy_0
+    {0xAD ,8},//HGX_GPU_4_Energy_0
+    {0xB5 ,8},//HGX_GPU_5_Energy_0
+    {0xBD ,8},//HGX_GPU_6_Energy_0
+    {0xC5 ,8},//HGX_GPU_7_Energy_0
+    {0xCE ,4},//HGX_GPU_0_DRAM_0_Power_0
+    {0xD2 ,4},//HGX_GPU_1_DRAM_0_Power_0
+    {0xD6 ,4},//HGX_GPU_2_DRAM_0_Power_0
+    {0xDA ,4},//HGX_GPU_3_DRAM_0_Power_0
+    {0xDE ,4},//HGX_GPU_4_DRAM_0_Power_0
+    {0xE2 ,4},//HGX_GPU_5_DRAM_0_Power_0
+    {0xE6 ,4},//HGX_GPU_6_DRAM_0_Power_0
+    {0xEA ,4},//HGX_GPU_7_DRAM_0_Power_0
+    {0xF0 ,4},//HGX_BMC_0_Temp_0
+    {0xF8 ,4},//HGX_Chassis_0_TotalHSC_Power_0
+    {0x120 ,4},//HGX_GPU_0_TEMP_0
+    {0x124 ,4},//HGX_GPU_1_TEMP_0
+    {0x128 ,4},//HGX_GPU_2_TEMP_0
+    {0x12C ,4},//HGX_GPU_3_TEMP_0
+    {0x130 ,4},//HGX_GPU_4_TEMP_0
+    {0x134 ,4},//HGX_GPU_5_TEMP_0
+    {0x138 ,4},//HGX_GPU_6_TEMP_0
+    {0x13C ,4},//HGX_GPU_7_TEMP_0
+    {0x140 ,4},//ProcessorModule_0_Inlet_Temp_0
+    {0x144 ,4},//ProcessorModule_0_Inlet_Temp_1
+    {0x148 ,4},//ProcessorModule_0_Exhaust_Temp_0
+    {0x150 ,4},//ProcessorModule_1_Inlet_Temp_0
+    {0x154 ,4},//ProcessorModule_1_Inlet_Temp_1
+    {0x158 ,4},//ProcessorModule_1_Exhaust_Temp_0
+    {0x280 ,8},//ProcessorModule_0_CPU_0_Energy_0
+    {0x288 ,8},//ProcessorModule_0_CPU_0_Power_0
+    {0x290 ,8},//ProcessorModule_0_Vreg_0_CpuPower_0
+    {0x298 ,8},//ProcessorModule_0_Vreg_0_SocPower_0
+    {0x2A0 ,8},//ProcessorModule_0_CPU_0_TempAvg_0
+    {0x2A8 ,8},//ProcessorModule_0_CPU_0_TempLimit_0
+    {0x2B0 ,8},//ProcessorModule_0_Vreg_0_CpuVoltage_0
+    {0x2B8 ,8},//ProcessorModule_0_Vreg_0_SocVoltage_0
+    {0x300 ,8},//ProcessorModule_0_CPU_1_Energy_0
+    {0x308 ,8},//ProcessorModule_0_CPU_1_Power_0
+    {0x310 ,8},//ProcessorModule_0_Vreg_1_CpuPower_0
+    {0x318 ,8},//ProcessorModule_0_Vreg_1_SocPower_0
+    {0x320 ,8},//ProcessorModule_0_CPU_1_TempAvg_0
+    {0x328 ,8},//ProcessorModule_0_CPU_1_TempLimit_0
+    {0x330 ,8},//ProcessorModule_0_Vreg_1_CpuVoltage_0
+    {0x338 ,8},//ProcessorModule_0_Vreg_1_SocVoltage_0
+    {0x380 ,8},//ProcessorModule_1_CPU_0_Energy_0
+    {0x388 ,8},//ProcessorModule_1_CPU_0_Power_0
+    {0x390 ,8},//ProcessorModule_1_Vreg_0_CpuPower_0
+    {0x398 ,8},//ProcessorModule_1_Vreg_0_SocPower_0
+    {0x3A0 ,8},//ProcessorModule_1_CPU_0_TempAvg_0
+    {0x3A8 ,8},//ProcessorModule_1_CPU_0_TempLimit_0
+    {0x3B0 ,8},//ProcessorModule_1_Vreg_0_CpuVoltage_0
+    {0x3B8 ,8},//ProcessorModule_1_Vreg_0_SocVoltage_0
+    {0x400 ,8},//ProcessorModule_1_CPU_1_Energy_0
+    {0x408 ,8},//ProcessorModule_1_CPU_1_Power_0
+    {0x410 ,8},//ProcessorModule_1_Vreg_1_CpuPower_0
+    {0x418 ,8},//ProcessorModule_1_Vreg_1_SocPower_0
+    {0x420 ,8},//ProcessorModule_1_CPU_1_TempAvg_0
+    {0x428 ,8},//ProcessorModule_1_CPU_1_TempLimit_0
+    {0x430 ,8},//ProcessorModule_1_Vreg_1_CpuVoltage_0
+    {0x438 ,8},//ProcessorModule_1_Vreg_1_SocVoltage_0
+};
diff --git a/src/satellite/SatelliteSensor.cpp b/src/satellite/SatelliteSensor.cpp
new file mode 100644
index 0000000..9be7c73
--- /dev/null
+++ b/src/satellite/SatelliteSensor.cpp
@@ -0,0 +1,474 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION &
+ * AFFILIATES. All rights reserved. SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "SatelliteSensor.hpp"
+
+#include "Utils.hpp"
+#include "VariantVisitors.hpp"
+
+#include <boost/algorithm/string/predicate.hpp>
+#include <boost/container/flat_map.hpp>
+#include <phosphor-logging/lg2.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sdbusplus/bus/match.hpp>
+
+#include <chrono>
+#include <cmath>
+#include <cstdint>
+#include <functional>
+#include <iostream>
+#include <limits>
+#include <memory>
+#include <numeric>
+#include <string>
+#include <vector>
+
+extern "C"
+{
+#include <i2c/smbus.h>
+#include <linux/i2c-dev.h>
+}
+
+constexpr const bool debug = false;
+
+constexpr const char* configInterface =
+    "xyz.openbmc_project.Configuration.Satellite";
+constexpr const char* sensorRootPath = "/xyz/openbmc_project/sensors/";
+constexpr const char* objectType = "Satellite";
+
+boost::container::flat_map<std::string, std::unique_ptr<SatelliteSensor>>
+    sensors;
+
+SatelliteSensor::SatelliteSensor(
+    std::shared_ptr<sdbusplus::asio::connection>& conn,
+    boost::asio::io_context& io, const std::string& sensorName,
+    const std::string& sensorConfiguration, const std::string& objType,
+    sdbusplus::asio::object_server& objectServer,
+    std::vector<thresholds::Threshold>&& thresholdData, uint8_t busId,
+    uint8_t addr, uint16_t offset, std::string& sensorType,
+    std::string& valueType, size_t pollTime, double minVal, double maxVal) :
+    Sensor(escapeName(sensorName), std::move(thresholdData),
+           sensorConfiguration, objType, false, false, maxVal, minVal, conn),
+    name(escapeName(sensorName)), busId(busId), addr(addr), offset(offset),
+    sensorType(sensorType), valueType(valueType), objectServer(objectServer),
+    waitTimer(io), pollRate(pollTime)
+{
+    // make the string to lowercase for Dbus sensor type
+    for (auto& c : sensorType)
+    {
+        c = tolower(c);
+    }
+    std::string sensorPath = sensorRootPath + sensorType + "/";
+
+    sensorInterface = objectServer.add_interface(sensorPath + name,
+                                                 sensorValueInterface);
+
+    for (const auto& threshold : thresholds)
+    {
+        std::string interface = thresholds::getInterface(threshold.level);
+        thresholdInterfaces[static_cast<size_t>(threshold.level)] =
+            objectServer.add_interface(sensorPath + name, interface);
+    }
+    association = objectServer.add_interface(sensorPath + name,
+                                             association::interface);
+
+    if (sensorType == "temperature")
+    {
+        setInitialProperties(sensor_paths::unitDegreesC);
+    }
+    else if (sensorType == "power")
+    {
+        setInitialProperties(sensor_paths::unitWatts);
+    }
+    else if (sensorType == "energy")
+    {
+        setInitialProperties(sensor_paths::unitJoules);
+    }
+    else if (sensorType == "voltage")
+    {
+        setInitialProperties(sensor_paths::unitVolts);
+    }
+    else
+    {
+        lg2::error("no sensor type found");
+    }
+}
+
+SatelliteSensor::~SatelliteSensor()
+{
+    waitTimer.cancel();
+    for (const auto& iface : thresholdInterfaces)
+    {
+        objectServer.remove_interface(iface);
+    }
+    objectServer.remove_interface(sensorInterface);
+    objectServer.remove_interface(association);
+}
+
+void SatelliteSensor::init()
+{
+    read();
+}
+
+void SatelliteSensor::checkThresholds()
+{
+    thresholds::checkThresholds(this);
+}
+
+template <typename T>
+int i2cCmd(uint8_t bus, uint8_t addr, size_t offset, T* reading, int length)
+{
+    std::string i2cBus = "/dev/i2c-" + std::to_string(bus);
+
+    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg)
+    int fd = open(i2cBus.c_str(), O_RDWR);
+    if (fd < 0)
+    {
+        lg2::error(" unable to open i2c device {BUS} err={FD}", "BUS", i2cBus,
+                   "FD", fd);
+        return -1;
+    }
+
+    unsigned long funcs = 0;
+    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg)
+    if (ioctl(fd, I2C_FUNCS, &funcs) < 0)
+    {
+        lg2::error(" not support I2C_FUNCS");
+        close(fd);
+        return -1;
+    }
+
+    int ret = 0;
+    struct i2c_rdwr_ioctl_data args = {nullptr, 0};
+    struct i2c_msg msg = {0, 0, 0, nullptr};
+    std::array<uint8_t, 8> cmd{};
+
+    msg.addr = addr;
+    args.msgs = &msg;
+    args.nmsgs = 1;
+
+    msg.flags = 0;
+    msg.buf = cmd.data();
+    // handle two bytes offset
+    if (offset > 255)
+    {
+        msg.len = 2;
+        msg.buf[0] = offset >> 8;
+        msg.buf[1] = offset & 0xFF;
+    }
+    else
+    {
+        msg.len = 1;
+        msg.buf[0] = offset & 0xFF;
+    }
+
+    // write offset
+    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg)
+    ret = ioctl(fd, I2C_RDWR, &args);
+    if (ret < 0)
+    {
+        close(fd);
+        return ret;
+    }
+
+    T data = 0;
+    msg.flags = I2C_M_RD;
+    msg.len = length;
+    msg.buf = (uint8_t*)&data;
+
+    // NOLINTNEXTLINE(cppcoreguidelines-pro-type-vararg)
+    ret = ioctl(fd, I2C_RDWR, &args);
+    if (ret < 0)
+    {
+        close(fd);
+        return ret;
+    }
+    // there is no value updated from HMC if reading data is all 0xff
+    uint8_t emptyBytes = 0;
+    uint8_t* ptr = (uint8_t*)&data;
+    for (int i = 0; i < length; i++, ptr++)
+    {
+        if (*ptr != 0xFF)
+        {
+            continue;
+        }
+        emptyBytes++;
+    }
+
+    // there is no reading if all bytes are 0xff
+    if (emptyBytes == length)
+    {
+        *reading = 0;
+    }
+    else
+    {
+        *reading = data;
+    }
+    close(fd);
+    return 0;
+}
+
+int SatelliteSensor::readRawEepromData(size_t off, uint8_t length,
+                                       double* data) const
+{
+    uint64_t reading = 0;
+    int ret = i2cCmd<uint64_t>(busId, addr, off, &reading, length);
+    if (ret >= 0)
+    {
+        if (debug)
+        {
+            std::cout << "offset: " << off << std::hex
+                      << " reading: " << reading << "\n";
+        }
+        if (sensorType == "Temperature")
+        {
+            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
+            *data = reading2tempEp(reinterpret_cast<uint8_t*>(&reading));
+        }
+        else if (sensorType == "Power")
+        {
+            // NOLINTNEXTLINE(cppcoreguidelines-pro-type-reinterpret-cast)
+            *data = reading2power(reinterpret_cast<uint8_t*>(&reading));
+        }
+        else if (sensorType == "Energy")
+        {
+            *data = reading / 1000.0; // mJ to J (double)
+        }
+        else
+        {
+            *data = reading;
+        }
+        return 0;
+    }
+    return ret;
+}
+
+int SatelliteSensor::readPLDMEepromData(size_t off, uint8_t length,
+                                        double* data) const
+{
+    double reading = 0;
+    int ret = i2cCmd<double>(busId, addr, off, &reading, length);
+    if (ret >= 0)
+    {
+        *data = reading;
+        return 0;
+    }
+    return ret;
+}
+
+void SatelliteSensor::read()
+{
+    size_t pollTime = getPollRate(); // in seconds
+
+    waitTimer.expires_after(std::chrono::seconds(pollTime));
+    waitTimer.async_wait([this](const boost::system::error_code& ec) {
+        if (ec == boost::asio::error::operation_aborted)
+        {
+            return; // we're being cancelled
+        }
+        // read timer error
+        if (ec)
+        {
+            lg2::error("timer error");
+            return;
+        }
+        double temp = 0;
+        int len = getLength(offset);
+        if (len == 0)
+        {
+            lg2::error("no offset is specified");
+            return;
+        }
+
+        int ret = 0;
+        // Sensor reading value types are sensor-specific. So, read
+        // and interpret sensor data based on it's value type.
+        if (valueType == "Raw")
+        {
+            ret = readRawEepromData(offset, len, &temp);
+        }
+        else if (valueType == "PLDM")
+        {
+            ret = readPLDMEepromData(offset, len, &temp);
+        }
+        else
+        {
+            lg2::error("Invalid ValueType for sensor: {NAME}", "NAME", name);
+            return;
+        }
+
+        if (ret >= 0)
+        {
+            if constexpr (debug)
+            {
+                lg2::error("Value update to {TEMP}", "TEMP", temp);
+            }
+            updateValue(temp);
+        }
+        else
+        {
+            lg2::error("Invalid read getRegsInfo");
+            incrementError();
+        }
+        read();
+    });
+}
+
+void createSensors(
+    boost::asio::io_context& io, sdbusplus::asio::object_server& objectServer,
+    boost::container::flat_map<std::string, std::unique_ptr<SatelliteSensor>>&
+        sensors,
+    std::shared_ptr<sdbusplus::asio::connection>& dbusConnection)
+{
+    if (!dbusConnection)
+    {
+        lg2::error("Connection not created");
+        return;
+    }
+
+    dbusConnection->async_method_call(
+        [&io, &objectServer, &dbusConnection, &sensors](
+            boost::system::error_code ec, const ManagedObjectType& resp) {
+        if (ec)
+        {
+            lg2::error("Error contacting entity manager");
+            return;
+        }
+        for (const auto& pathPair : resp)
+        {
+            for (const auto& entry : pathPair.second)
+            {
+                if (entry.first != configInterface)
+                {
+                    continue;
+                }
+                std::string name = loadVariant<std::string>(entry.second,
+                                                            "Name");
+
+                std::vector<thresholds::Threshold> sensorThresholds;
+                if (!parseThresholdsFromConfig(pathPair.second,
+                                               sensorThresholds))
+                {
+                    lg2::error("error populating thresholds for {NAME}", "NAME",
+                               name);
+                }
+
+                uint8_t busId = loadVariant<uint8_t>(entry.second, "Bus");
+
+                uint8_t addr = loadVariant<uint8_t>(entry.second, "Address");
+
+                uint16_t off = loadVariant<uint16_t>(entry.second,
+                                                     "OffsetValue");
+
+                std::string sensorType = loadVariant<std::string>(entry.second,
+                                                                  "SensorType");
+
+                std::string valueType = loadVariant<std::string>(entry.second,
+                                                                 "ValueType");
+
+                size_t rate = loadVariant<uint8_t>(entry.second, "PollRate");
+
+                double minVal = loadVariant<double>(entry.second, "MinValue");
+
+                double maxVal = loadVariant<double>(entry.second, "MaxValue");
+                if constexpr (debug)
+                {
+                    lg2::info("Configuration parsed for \n\t {CONF}\nwith\n"
+                              "\tName: {NAME}\n"
+                              "\tBus: {BUS}\n"
+                              "\tAddress:{ADDR}\n"
+                              "\tOffset: {OFF}\n"
+                              "\tType : {TYPE}\n"
+                              "\tValue Type : {VALUETYPE}\n"
+                              "\tPollrate: {RATE}\n"
+                              "\tMinValue: {MIN}\n"
+                              "\tMaxValue: {MAX}\n",
+                              "CONF", entry.first, "NAME", name, "BUS",
+                              static_cast<int>(busId), "ADDR",
+                              static_cast<int>(addr), "OFF",
+                              static_cast<int>(off), "TYPE", sensorType,
+                              "VALUETYPE", valueType, "RATE", rate, "MIN",
+                              static_cast<double>(minVal), "MAX",
+                              static_cast<double>(maxVal));
+                }
+
+                auto& sensor = sensors[name];
+                sensor = nullptr;
+
+                sensor = std::make_unique<SatelliteSensor>(
+                    dbusConnection, io, name, pathPair.first, objectType,
+                    objectServer, std::move(sensorThresholds), busId, addr, off,
+                    sensorType, valueType, rate, minVal, maxVal);
+
+                sensor->init();
+            }
+        }
+    },
+        entityManagerName, "/xyz/openbmc_project/inventory",
+        "org.freedesktop.DBus.ObjectManager", "GetManagedObjects");
+}
+
+int main()
+{
+    boost::asio::io_context io;
+    auto systemBus = std::make_shared<sdbusplus::asio::connection>(io);
+    sdbusplus::asio::object_server objectServer(systemBus, true);
+    objectServer.add_manager("/xyz/openbmc_project/sensors");
+    systemBus->request_name("xyz.openbmc_project.Satellite");
+
+    boost::asio::post(
+        io, [&]() { createSensors(io, objectServer, sensors, systemBus); });
+
+    boost::asio::steady_timer configTimer(io);
+
+    std::function<void(sdbusplus::message::message&)> eventHandler =
+        [&](sdbusplus::message::message&) {
+        configTimer.expires_after(std::chrono::seconds(1));
+        // create a timer because normally multiple properties change
+        configTimer.async_wait([&](const boost::system::error_code& ec) {
+            if (ec == boost::asio::error::operation_aborted)
+            {
+                return; // we're being canceled
+            }
+            // config timer error
+            if (ec)
+            {
+                lg2::error("timer error");
+                return;
+            }
+            createSensors(io, objectServer, sensors, systemBus);
+            if (sensors.empty())
+            {
+                lg2::info("Configuration not detected");
+            }
+        });
+    };
+
+    sdbusplus::bus::match::match configMatch(
+        static_cast<sdbusplus::bus::bus&>(*systemBus),
+        "type='signal',member='PropertiesChanged',"
+        "path_namespace='" +
+            std::string(inventoryPath) +
+            "',"
+            "arg0namespace='" +
+            configInterface + "'",
+        eventHandler);
+
+    setupManufacturingModeMatch(*systemBus);
+    io.run();
+    return 0;
+}
\ No newline at end of file
diff --git a/src/satellite/SatelliteSensor.hpp b/src/satellite/SatelliteSensor.hpp
new file mode 100644
index 0000000..200b611
--- /dev/null
+++ b/src/satellite/SatelliteSensor.hpp
@@ -0,0 +1,119 @@
+/*
+ * SPDX-FileCopyrightText: Copyright (c) 2022-2024 NVIDIA CORPORATION &
+ * AFFILIATES. All rights reserved. SPDX-License-Identifier: Apache-2.0
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#pragma once
+#include <boost/asio/io_context.hpp>
+#include <boost/asio/steady_timer.hpp>
+#include <boost/container/flat_map.hpp>
+#include <sdbusplus/asio/connection.hpp>
+#include <sdbusplus/asio/object_server.hpp>
+#include <sensor.hpp>
+
+#include <chrono>
+#include <limits>
+#include <memory>
+#include <string>
+#include <vector>
+
+#ifdef AUTO_GEN_SENSOR_HEADER
+#include <HmcSensor.hpp>
+#endif
+
+template <typename T>
+int i2cCmd(uint8_t bus, uint8_t addr, size_t offset, T* reading, int length);
+
+struct SatelliteSensor : public Sensor
+{
+    SatelliteSensor(std::shared_ptr<sdbusplus::asio::connection>& conn,
+                    boost::asio::io_context& io, const std::string& name,
+                    const std::string& sensorConfiguration,
+                    const std::string& objType,
+                    sdbusplus::asio::object_server& objectServer,
+                    std::vector<thresholds::Threshold>&& thresholdData,
+                    uint8_t busId, uint8_t addr, uint16_t offset,
+                    std::string& sensorType, std::string& valueType,
+                    size_t pollTime, double minVal, double maxVal);
+    ~SatelliteSensor() override;
+
+    void checkThresholds() override;
+    size_t getPollRate() const
+    {
+        return pollRate;
+    }
+    void read();
+    void init();
+
+    std::string name;
+    uint8_t busId;
+    uint8_t addr;
+    uint16_t offset;
+    std::string sensorType;
+    std::string valueType;
+
+  private:
+    int readRawEepromData(size_t off, uint8_t length, double* data) const;
+    int readPLDMEepromData(size_t off, uint8_t length, double* data) const;
+    static uint8_t getLength(uint16_t offset)
+    {
+#ifdef AUTO_GEN_SENSOR_HEADER
+        auto it = sensorMap.find(offset);
+        // offset is not in the map.
+        if (it == sensorMap.end())
+        {
+            return 0;
+        }
+        return sensorMap[offset];
+#else
+        // return offset to avoid the unused variable error.
+        return offset;
+#endif
+    }
+    sdbusplus::asio::object_server& objectServer;
+    boost::asio::steady_timer waitTimer;
+    size_t pollRate;
+    static double reading2tempEp(const uint8_t* rawData)
+    {
+        // this automatic convert to int (two's complement integer)
+        int32_t intg = (rawData[3] << 24 | rawData[2] << 16 | rawData[1] << 8 |
+                        rawData[0]);
+        uint8_t frac = uint8_t(intg & 0xFF);
+        intg >>=
+            8; // shift operation on a int keep the signal in two's complement
+
+        double temp = 0;
+        if (intg > 0)
+        {
+            temp = double(intg) + double(frac / 256.0);
+        }
+        else
+        {
+            temp = double(intg) - double(frac / 256.0);
+        }
+
+        return temp;
+    }
+    static double reading2power(const uint8_t* rawData)
+    {
+        double power = 0;
+        uint32_t val = (rawData[3] << 24) + (rawData[2] << 16) +
+                       (rawData[1] << 8) + rawData[0];
+
+        power = static_cast<double>(val) / 1000; // mWatts to Watts
+
+        return power;
+    }
+};
\ No newline at end of file
diff --git a/src/satellite/meson.build b/src/satellite/meson.build
new file mode 100644
index 0000000..bf64647
--- /dev/null
+++ b/src/satellite/meson.build
@@ -0,0 +1,14 @@
+src_inc = include_directories('..')
+
+executable(
+    'satellitesensor',
+    'SatelliteSensor.cpp',
+    dependencies: [
+        default_deps,
+        i2c,
+        thresholds_dep,
+        utils_dep,
+    ],
+    include_directories: src_inc,
+    install: true,
+)
\ No newline at end of file
-- 
2.31.1

