From b078f4aaa6c155d0cd89012f2158e3128adefe99 Mon Sep 17 00:00:00 2001
From: Nima <v.nima2007@gmail.com>
Date: Fri, 3 Mar 2023 16:26:13 -0800
Subject: [PATCH] Nima rough draft http proxy support for raw socket

Adds support to proxy raw socket over HTTP proxy (via CONNECT method)

Only supports IPV6 proxy server address for now.

Instructions:
-Enable it by defining RPROXY=1
-Set proxy server ipv6 address with RPROXY_HOST (No hostname support yet)
-Set proxy server port with RPROXY_PORT
---
 src/socket.c | 193 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 193 insertions(+)

diff --git a/src/socket.c b/src/socket.c
index 6e65c42..8432a9f 100644
--- a/src/socket.c
+++ b/src/socket.c
@@ -82,6 +82,7 @@ static int wsa_init = 0;
 #ifndef ETIMEDOUT
 #define ETIMEDOUT 138
 #endif
+#include <ctype.h>
 
 static int verbose = 0;
 
@@ -1155,8 +1156,200 @@ int socket_connect_addr(struct sockaddr* addr, uint16_t port)
 	return sfd;
 }
 
+#define SOCKET int
+#define INVALID_SOCKET (-1)
+#define SOCKET_ERROR (-1)
+#define READ_BUFFER_SIZE 128
+
+char* socket_receiveline (SOCKET sock)
+{
+    char* buf;
+    int bufpos = 0;
+    int bufsize = READ_BUFFER_SIZE;
+    int n;
+    int i;
+    //abort if invalid socket
+    if (sock == INVALID_SOCKET)
+        return NULL;
+    //receive data in dynamically (re)allocated buffer
+    if ((buf = (char*)malloc(READ_BUFFER_SIZE)) == NULL)
+        return NULL;
+    while ((n = recv(sock, buf + bufpos, READ_BUFFER_SIZE, MSG_PEEK)) > 0) {
+        //detect line break in peeked data
+        for (i = 0; i < n; i++) {
+            if (buf[bufpos + i] == '\n') {
+                n = i + 1;
+                //remove trailing line break
+                if ((recv(sock, buf + bufpos, n, 0)) == n) {
+                    if (bufpos + i > 0 && buf[bufpos + i - 1] == '\r')
+                        buf[bufpos + i - 1] = 0;
+                    else
+                        buf[bufpos + i] = 0;
+                    return buf;
+                }
+            }
+        }
+        //read data up to and including line break
+        if ((n = recv(sock, buf + bufpos, n, 0)) <= 0)
+            break;
+        bufpos += n;
+        if ((buf = (char*)realloc(buf, bufpos + READ_BUFFER_SIZE)) == NULL)
+            return NULL;
+    }
+    //detect disconnected connection
+    if (bufpos == 0 && n < 0) {
+        free(buf);
+        return NULL;
+    }
+    //add trailing zero
+    if (bufpos >= bufsize)
+        if ((buf = (char*)realloc(buf, bufpos + 1)) == NULL)
+            return NULL;
+    buf[bufpos] = 0;
+    return buf;
+}
+
+int send_http_request (SOCKET sock, const char* request, char** response)
+{
+    char* responseline;
+    int responselinelen;
+    int responselen = 0;
+    int resultcode = -1;
+    char* p;
+    if (response)
+        *response = NULL;
+    //send request
+    if (request) {
+        if (send(sock, request, strlen(request), 0) == -1)
+            return -1;
+    }
+    //get result code
+    if ((responseline = socket_receiveline(sock)) == NULL)
+        return -1;
+    if (strncasecmp(responseline, "HTTP/", 5) != 0)
+        return -1;
+    p = responseline + 5;
+    while (*p && (isdigit(*p) || *p == '.'))
+        p++;
+    if (!*p || *p++ != ' ')
+        return -1;
+    if ((resultcode = strtol(p, &p, 10)) == 0)
+        return -1;
+    //get entire response header
+    while (responseline && *responseline) {
+        if (response) {
+            responselinelen = strlen(responseline);
+            *response = (char*)realloc(*response, responselen + responselinelen + 2);
+            memcpy(*response + responselen, responseline, responselinelen);
+            responselen += responselinelen;
+            (*response)[responselen++] = '\n';
+        }
+        free(responseline);
+        responseline = socket_receiveline(sock);
+    }
+    if (responseline)
+        free(responseline);
+    if (response)
+        (*response)[responselen] = 0;
+    return resultcode;
+}
+
+SOCKET nima_direct_v6(const char *ipv6_addr, uint16_t port) {
+    int sock = INVALID_SOCKET;
+    struct sockaddr_in6 addr;
+    memset(&addr, 0, sizeof(addr));
+    addr.sin6_family = AF_INET6;
+    addr.sin6_port = htons(port);
+    if (inet_pton(AF_INET6, ipv6_addr, &addr.sin6_addr) != 1) {
+        printf("Error putting in host ip: %s\n", ipv6_addr);
+        return -1;
+    }
+    if ((sock = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP)) == INVALID_SOCKET) {
+        printf("Error creating connection socket\n");
+        return -1;
+    }
+    if (connect(sock, (struct sockaddr *) &addr, sizeof(addr)) == SOCKET_ERROR) {
+        close(sock);
+        printf("Error connecting to host: %s\n", ipv6_addr);
+        return -1;
+    }
+    return sock;
+}
+
+SOCKET nima_proxy(const char *dsthost, uint16_t dstport) {
+    SOCKET sock = INVALID_SOCKET;
+    //Nima hardcoded proxy
+    //char* proxyhost = "192.168.8.188";
+    //char* proxyhost = "dd88:433a:88c5:0:10f7:3e20:2d61:dfcb";
+    //uint16_t proxyport = 8888;
+
+    // get ipv6 host from enviromental variable
+    char *proxyhost = getenv("RPROXY_HOST");
+    if (proxyhost == NULL) {
+        printf("Error getting RPROXY_HOST string from enviromental variables\n");
+        return -1;
+    }
+
+    // get port number from enviromental variable
+    char *proxyport_str = getenv("RPROXY_PORT");
+    if (proxyport_str == NULL) {
+        printf("Error getting RPROXY_PORT string from enviromental variables\n");
+        return -1;
+    }
+    uint16_t proxyport = strtol(proxyport_str, NULL, 10);
+
+    //print port and host info
+    printf("Using env proxyhost: %s\n", proxyhost);
+    printf("Using env proxyport: %d\n", proxyport);
+
+
+    // CONNECTION USING HTTP/WEB PROXY
+    //connect to the HTTP proxy server
+    printf("Preparing to connect to web proxy: %s port %lu\n", proxyhost, (unsigned long) proxyport);
+    if ((sock = nima_direct_v6(proxyhost, proxyport)) == INVALID_SOCKET) {
+        printf("Error connecting to webproxy");
+        return INVALID_SOCKET;
+    }
+    printf("Connected to web proxy: %s port %lu\n", proxyhost, (unsigned long) proxyport);
+
+    //connect proxy to destination
+    int result;
+    char *response;
+    char *proxycmd;
+    const char *host = (dsthost ? dsthost : "");
+    size_t proxycmdlen = 22 + 15 + 1 + 5 + 1 + 0;
+
+    printf("Sending HTTP proxy CONNECT %s:%u\n", host, dstport);
+    if ((proxycmd = (char *) malloc(proxycmdlen)) == NULL) {
+        printf("Memory allocation error\n");
+        return INVALID_SOCKET;
+    }
+    snprintf(proxycmd, proxycmdlen, "CONNECT %s:%u HTTP/1.0\r\n\r\n", host, dstport);
+
+    result = send_http_request(sock, proxycmd, &response);
+    free(proxycmd);
+    if (result != 200)
+        printf("HTTP proxy response code %i, details:\n%s", result, response);
+    free(response);
+    response = NULL;
+
+    printf("Web proxy connection established to: %s:%lu\n", host, (unsigned long) dstport);
+
+    return sock;
+}
+
 int socket_connect(const char *addr, uint16_t port)
 {
+    //Check if we should use nima code.
+    char *use_proxy = getenv("RPROXY");
+    if (use_proxy != NULL) {
+        printf("Nima RPROXY defined, running my code\n");
+        return nima_proxy(addr, port);
+    } else {
+        printf("Nima RPROXY not defined, running their code\n");
+    }
+
+    // Continue existing method:
 	int sfd = -1;
 	int yes = 1;
 	int bufsize = 0x20000;
-- 
2.44.2

