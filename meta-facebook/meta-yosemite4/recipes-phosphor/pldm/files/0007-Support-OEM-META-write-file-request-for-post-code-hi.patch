From dbc574cf1a050fb72dfbe7b8bbf04444895a0051 Mon Sep 17 00:00:00 2001
From: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
Date: Mon, 23 Oct 2023 17:06:54 +0800
Subject: [PATCH] Support OEM-META write file request for post code history

Summary:
  - Support write file req when BIC sends postcode to BMC.
    Also, set up TID to slot mapping table at the beginning of
    the oem mata handler to correspond to the post code
    belonging to which slot.
  - Extend the handler with TID parameter to know which request is sent from.

Change-Id: I56d303a5bc2f059451ee207a1de591be0d9993ac
Signed-off-by: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
---
 libpldmresponder/meson.build                  |  10 ++
 meson.build                                   |   4 +
 meson.options                                 |   8 ++
 oem/meta/libpldmresponder/file_io.cpp         | 126 ++++++++++++++++++
 oem/meta/libpldmresponder/file_io.hpp         |  62 +++++++++
 oem/meta/libpldmresponder/file_io_by_type.hpp |  28 ++++
 .../file_io_type_post_code.cpp                |  59 ++++++++
 .../file_io_type_post_code.hpp                |  42 ++++++
 pldmd/handler.hpp                             |  11 ++
 pldmd/invoker.hpp                             |   7 +-
 pldmd/pldmd.cpp                               |  11 +-
 11 files changed, 365 insertions(+), 3 deletions(-)
 create mode 100644 oem/meta/libpldmresponder/file_io.cpp
 create mode 100644 oem/meta/libpldmresponder/file_io.hpp
 create mode 100644 oem/meta/libpldmresponder/file_io_by_type.hpp
 create mode 100644 oem/meta/libpldmresponder/file_io_type_post_code.cpp
 create mode 100644 oem/meta/libpldmresponder/file_io_type_post_code.hpp

diff --git a/libpldmresponder/meson.build b/libpldmresponder/meson.build
index f949db9..9558433 100644
--- a/libpldmresponder/meson.build
+++ b/libpldmresponder/meson.build
@@ -54,6 +54,16 @@ if get_option('oem-ibm').allowed()
   ]
 endif
 
+if get_option('oem-meta').enabled()
+   responder_headers += [
+    '../oem/meta/',
+   ]
+  sources += [
+    '../oem/meta/libpldmresponder/file_io.cpp',
+    '../oem/meta/libpldmresponder/file_io_type_post_code.cpp',
+  ]
+endif
+
 libpldmresponder = library(
   'pldmresponder',
   sources,
diff --git a/meson.build b/meson.build
index 2e4d8fd..c62ce37 100644
--- a/meson.build
+++ b/meson.build
@@ -59,6 +59,10 @@ if get_option('oem-ibm').allowed()
   add_project_arguments('-DOEM_IBM', language : 'c')
   add_project_arguments('-DOEM_IBM', language : 'cpp')
 endif
+if get_option('oem-meta').enabled()
+  add_project_arguments('-DOEM_META', language : 'c')
+  add_project_arguments('-DOEM_META', language : 'cpp')
+endif
 conf_data.set('NUMBER_OF_REQUEST_RETRIES', get_option('number-of-request-retries'))
 conf_data.set('INSTANCE_ID_EXPIRATION_INTERVAL',get_option('instance-id-expiration-interval'))
 conf_data.set('RESPONSE_TIME_OUT',get_option('response-time-out'))
diff --git a/meson.options b/meson.options
index 9e2339f..34f69e8 100644
--- a/meson.options
+++ b/meson.options
@@ -41,6 +41,14 @@ option(
     description: 'transport via af-mctp or mctp-demux'
 )
 
+# OEM Options
+option(
+    'oem-meta',
+    type: 'feature',
+    value: 'enabled',
+    description: 'Enable Meta OEM PLDM'
+)
+
 # As per PLDM spec DSP0240 version 1.1.0, in Timing Specification for PLDM messages (Table 6),
 # the instance ID for a given response will expire and become reusable if a response has not been
 # received within a maximum of 6 seconds after a request is sent. By setting the dbus timeout
diff --git a/oem/meta/libpldmresponder/file_io.cpp b/oem/meta/libpldmresponder/file_io.cpp
new file mode 100644
index 0000000..04186bc
--- /dev/null
+++ b/oem/meta/libpldmresponder/file_io.cpp
@@ -0,0 +1,126 @@
+#include "file_io.hpp"
+
+#include "file_io_type_post_code.hpp"
+#include "xyz/openbmc_project/Common/error.hpp"
+
+#include <libpldm/oem/meta/file_io.h>
+
+#include <filesystem>
+namespace pldm
+{
+namespace responder
+{
+
+namespace oem_meta
+{
+
+using namespace sdbusplus::xyz::openbmc_project::Common::Error;
+
+static constexpr auto mctpEndpointInterface =
+    "xyz.openbmc_project.Configuration.MCTPEndpoint";
+
+int setupTidToSlotMappingTable()
+{
+    static constexpr auto searchpath = "/xyz/openbmc_project/";
+    int depth = 0;
+    std::vector<std::string> mctpInterface = {mctpEndpointInterface};
+    pldm::utils::GetSubTreeResponse response;
+    try
+    {
+        response = pldm::utils::DBusHandler().getSubtree(searchpath, depth,
+                                                         mctpInterface);
+    }
+    catch (const sdbusplus::exception_t& e)
+    {
+        error(
+            "getSubtree call failed with, ERROR={ERROR} PATH={PATH} INTERFACE={INTERFACE}",
+            "ERROR", e, "PATH", searchpath, "INTERFACE", mctpEndpointInterface);
+        return PLDM_ERROR;
+    }
+
+    static constexpr auto endpointIdsProperty = "EndpointId";
+
+    for (const auto& [objectPath, serviceMap] : response)
+    {
+        // Split the objectPath to get the correspond slot.
+        // e.g Yosemite_4_Wailua_Falls_Slot3/BIC;
+        int slotNum = std::filesystem::path(objectPath.c_str())
+                          .parent_path()
+                          .string()
+                          .back() -
+                      '0';
+
+        try
+        {
+            auto value = pldm::utils::DBusHandler().getDbusProperty<uint64_t>(
+                objectPath.c_str(), endpointIdsProperty, mctpEndpointInterface);
+
+            tidToSlotMap.insert({value, slotNum});
+        }
+        catch (const sdbusplus::exception_t& e)
+        {
+            error(
+                "Error getting Names property, ERROR={ERROR} PATH={PATH} INTERFACE={INTERFACE}",
+                "ERROR", e, "PATH", searchpath, "INTERFACE",
+                mctpEndpointInterface);
+            return PLDM_ERROR;
+        }
+    }
+
+    return PLDM_SUCCESS;
+}
+
+std::unique_ptr<FileHandler> Handler::getHandlerByType(uint8_t fileIOType)
+{
+    switch (fileIOType)
+    {
+        case POST_CODE:
+        {
+            return std::make_unique<PostCodeHandler>(this->getTID(),
+                                                     tidToSlotMap);
+        }
+        default:
+        {
+            error("Get invalid file io type, FILEIOTYPE={FILEIOTYPE}",
+                  "FILEIOTYPE", fileIOType);
+            break;
+        }
+    }
+    return nullptr;
+}
+
+Response Handler::writeFileIO(const pldm_msg* request, size_t payloadLength)
+{
+    uint8_t fileIOType;
+    uint32_t length;
+
+    std::array<uint8_t, decodeDataMaxLength> retDataField{};
+
+    auto rc = decode_oem_meta_file_io_req(request, payloadLength, &fileIOType,
+                                          &length, retDataField.data());
+
+    if (rc != PLDM_SUCCESS)
+    {
+        return ccOnlyResponse(request, rc);
+    }
+
+    std::unique_ptr<FileHandler> handler{};
+    handler = getHandlerByType(fileIOType);
+
+    if (handler == nullptr)
+    {
+        return ccOnlyResponse(request, PLDM_ERROR_UNSUPPORTED_PLDM_CMD);
+    }
+
+    // Set requstData to vector for each handler easy to use.
+    std::vector<uint8_t> data(std::begin(retDataField),
+                              std::begin(retDataField) + length);
+
+    rc = handler->write(data);
+
+    return ccOnlyResponse(request, rc);
+}
+} // namespace oem_meta
+
+} // namespace responder
+} // namespace pldm
diff --git a/oem/meta/libpldmresponder/file_io.hpp b/oem/meta/libpldmresponder/file_io.hpp
new file mode 100644
index 0000000..9d1da9f
--- /dev/null
+++ b/oem/meta/libpldmresponder/file_io.hpp
@@ -0,0 +1,62 @@
+#pragma once
+
+#include "common/utils.hpp"
+#include "file_io_by_type.hpp"
+#include "pldmd/handler.hpp"
+
+#include <libpldm/oem/meta/file_io.h>
+
+#include <phosphor-logging/lg2.hpp>
+
+PHOSPHOR_LOG2_USING;
+
+namespace pldm
+{
+namespace responder
+{
+namespace oem_meta
+{
+
+static std::map<uint8_t, int> tidToSlotMap;
+
+constexpr auto decodeDataMaxLength = 32;
+
+enum pldm_oem_meta_file_io_type : uint8_t
+{
+    POST_CODE = 0x00,
+};
+
+int setupTidToSlotMappingTable();
+
+class Handler : public CmdHandler
+{
+  public:
+    Handler()
+    {
+        handlers.emplace(PLDM_OEM_META_FILEIO_CMD_WRITE_FILE,
+                         [this](const pldm_msg* request, size_t payloadLength) {
+            return this->writeFileIO(request, payloadLength);
+        });
+
+        if (setupTidToSlotMappingTable() != PLDM_SUCCESS)
+        {
+            error("Fail to setup tid to slot mapping table");
+        }
+    }
+
+  private:
+    /** @brief Handler for writeFileIO command
+     *
+     *  @param[in] request - pointer to PLDM request payload
+     *  @param[in] payloadLength - length of the message
+     *
+     *  @return PLDM response message
+     */
+    Response writeFileIO(const pldm_msg* request, size_t payloadLength);
+
+    std::unique_ptr<FileHandler> getHandlerByType(uint8_t fileIOType);
+};
+
+} // namespace oem_meta
+} // namespace responder
+} // namespace pldm
diff --git a/oem/meta/libpldmresponder/file_io_by_type.hpp b/oem/meta/libpldmresponder/file_io_by_type.hpp
new file mode 100644
index 0000000..2c27d42
--- /dev/null
+++ b/oem/meta/libpldmresponder/file_io_by_type.hpp
@@ -0,0 +1,28 @@
+#pragma once
+#include <cstdint>
+#include <vector>
+
+namespace pldm
+{
+namespace responder
+{
+namespace oem_meta
+{
+
+/**
+ *  @class FileHandler
+ *
+ *  Base class to handle read/write of all oem file types
+ */
+class FileHandler
+{
+  public:
+    virtual int write(const std::vector<uint8_t>& data) = 0;
+    virtual int read(const std::vector<uint8_t>& data) = 0;
+    virtual ~FileHandler() {}
+};
+
+} // namespace oem_meta
+
+} // namespace responder
+} // namespace pldm
diff --git a/oem/meta/libpldmresponder/file_io_type_post_code.cpp b/oem/meta/libpldmresponder/file_io_type_post_code.cpp
new file mode 100644
index 0000000..04c92ba
--- /dev/null
+++ b/oem/meta/libpldmresponder/file_io_type_post_code.cpp
@@ -0,0 +1,59 @@
+#include "file_io_type_post_code.hpp"
+
+#include <phosphor-logging/lg2.hpp>
+
+PHOSPHOR_LOG2_USING;
+namespace pldm
+{
+namespace responder
+{
+namespace oem_meta
+{
+using postcode_t = std::tuple<uint64_t, std::vector<uint8_t>>;
+
+int PostCodeHandler::write(const std::vector<uint8_t>& postCodeList)
+{
+    static constexpr auto dbusService = "xyz.openbmc_project.State.Boot.Raw";
+    static constexpr auto dbusObj = "/xyz/openbmc_project/state/boot/raw";
+
+    int slot = tidToSlotMap.at(tid);
+
+    std::string dbusObjStr = dbusObj + std::to_string(slot);
+
+    uint64_t primaryPostCode = 0;
+
+    // Putting list of the bytes together to form a meaningful postcode
+    // AMD platform send four bytes as a post code unit
+    size_t index = 0;
+    std::for_each(postCodeList.begin(), postCodeList.end(),
+                  [&primaryPostCode, &index](uint8_t postcode) {
+        primaryPostCode |= std::uint64_t(postcode) << (8 * index);
+        index++;
+    });
+
+    try
+    {
+        auto& bus = pldm::utils::DBusHandler::getBus();
+        auto method = bus.new_method_call(dbusService, dbusObjStr.c_str(),
+                                          "org.freedesktop.DBus.Properties",
+                                          "Set");
+
+        method.append(
+            dbusService, "Value",
+            std::variant<postcode_t>(postcode_t(primaryPostCode, {})));
+
+        auto reply = bus.call(method);
+    }
+    catch (const std::exception& e)
+    {
+        error("Set Post code error. ERROR={ERROR}", "ERROR", e);
+        return PLDM_ERROR;
+    }
+
+    return PLDM_SUCCESS;
+}
+
+} // namespace oem_meta
+
+} // namespace responder
+} // namespace pldm
diff --git a/oem/meta/libpldmresponder/file_io_type_post_code.hpp b/oem/meta/libpldmresponder/file_io_type_post_code.hpp
new file mode 100644
index 0000000..4458db9
--- /dev/null
+++ b/oem/meta/libpldmresponder/file_io_type_post_code.hpp
@@ -0,0 +1,42 @@
+#pragma once
+
+#include "common/utils.hpp"
+#include "file_io_by_type.hpp"
+
+namespace pldm
+{
+namespace responder
+{
+namespace oem_meta
+{
+/** @class PostCodeHandler
+ *
+ *  @brief Inherits and implements FileHandler. This class is used
+ *  to store incoming postcode
+ */
+class PostCodeHandler : public FileHandler
+{
+  public:
+    PostCodeHandler(uint8_t tid, const std::map<uint8_t, int>& tidToSlotMap) :
+        tid(tid), tidToSlotMap(tidToSlotMap)
+    {}
+
+    /** @brief Method to store postcode list
+     *  @param[in] data - post code
+     *  @return  PLDM status code
+     */
+    int write(const std::vector<uint8_t>& data);
+
+    int read([[maybe_unused]] const std::vector<uint8_t>& data)
+    {
+        return PLDM_ERROR_UNSUPPORTED_PLDM_CMD;
+    }
+
+  private:
+    uint8_t tid = 0;
+    const std::map<uint8_t, int> tidToSlotMap;
+};
+
+} // namespace oem_meta
+} // namespace responder
+} // namespace pldm
diff --git a/pldmd/handler.hpp b/pldmd/handler.hpp
index cfa95eb..0cd14ba 100644
--- a/pldmd/handler.hpp
+++ b/pldmd/handler.hpp
@@ -55,11 +55,22 @@ class CmdHandler
         return response;
     }
 
+    void setTID(uint8_t tid)
+    {
+        this->tid = tid;
+    }
+
+    uint8_t getTID()
+    {
+        return this->tid;
+    }
+
   protected:
     /** @brief map of PLDM command code to handler - to be populated by derived
      *         classes.
      */
     std::map<Command, HandlerFunc> handlers;
+    uint8_t tid = 0;
 };
 
 } // namespace responder
diff --git a/pldmd/invoker.hpp b/pldmd/invoker.hpp
index 9903e7f..094eaf1 100644
--- a/pldmd/invoker.hpp
+++ b/pldmd/invoker.hpp
@@ -30,15 +30,18 @@ class Invoker
 
     /** @brief Invoke a PLDM command handler
      *
+     *  @param[in] tid - PLDM request TID
      *  @param[in] pldmType - PLDM type code
      *  @param[in] pldmCommand - PLDM command code
      *  @param[in] request - PLDM request message
      *  @param[in] reqMsgLen - PLDM request message size
      *  @return PLDM response message
      */
-    Response handle(Type pldmType, Command pldmCommand, const pldm_msg* request,
-                    size_t reqMsgLen)
+
+    Response handle(uint8_t tid, Type pldmType, Command pldmCommand,
+                    const pldm_msg* request, size_t reqMsgLen)
     {
+        handlers.at(pldmType)->setTID(tid);
         return handlers.at(pldmType)->handle(pldmCommand, request, reqMsgLen);
     }
 
diff --git a/pldmd/pldmd.cpp b/pldmd/pldmd.cpp
index a85157f..e302f99 100644
--- a/pldmd/pldmd.cpp
+++ b/pldmd/pldmd.cpp
@@ -65,6 +65,10 @@ PHOSPHOR_LOG2_USING;
 #include "libpldmresponder/oem_ibm_handler.hpp"
 #endif
 
+#ifdef OEM_META
+#include "libpldmresponder/file_io.hpp"
+#endif
+
 constexpr uint8_t MCTP_MSG_TYPE_PLDM = 1;
 
 using namespace pldm;
@@ -107,7 +111,7 @@ static std::optional<Response>
         {
             if (hdrFields.pldm_type != PLDM_FWUP)
             {
-                response = invoker.handle(hdrFields.pldm_type,
+                response = invoker.handle(tid, hdrFields.pldm_type,
                                           hdrFields.command, request,
                                           requestLen);
             }
@@ -259,6 +263,11 @@ int main(int argc, char** argv)
         dbusToPLDMEventHandler = std::make_unique<DbusToPLDMEvent>(
             pldmTransport.getEventSource(), hostEID, instanceIdDb, &reqHandler);
     }
+
+#ifdef OEM_META
+    invoker.registerHandler(PLDM_OEM, std::make_unique<oem_meta::Handler>());
+#endif
+
     auto biosHandler = std::make_unique<bios::Handler>(
         pldmTransport.getEventSource(), hostEID, &instanceIdDb, &reqHandler,
         oemBiosHandler.get());
-- 
2.25.1

