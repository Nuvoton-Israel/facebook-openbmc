From e9e787c348c600f30076eea96396d2f4750c6a09 Mon Sep 17 00:00:00 2001
From: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
Date: Mon, 23 Oct 2023 17:03:16 +0800
Subject: [PATCH] Support OEM-META write file req decode

Summary:
Support send post code to bmc when host power on.

PLDM OEM Write File IO cmd:
  Example:
	Request:
	   Btye 0: 0x3F (OEM cmd)
	   Byte 1: 0x02 (FILE IO)
	   Byte 2 : 0x00 (POST CODE)
	   Byte 3-6: 0x04 (Data length)
	   Byte 7-10: 0x93 0xE0 0x00 0xEA (post code)

	Response:
	  Byte 0: 0x00 (success)

Test Plan:
- Build code : pass

Change-Id: I85437698642dd3cbe6084acf1feada842d206eac
Signed-off-by: Delphine CC Chiu <Delphine_CC_Chiu@wiwynn.com>
---
 include/libpldm/meson.build                |  7 ++++
 include/libpldm/oem/meta/libpldm/file_io.h | 39 ++++++++++++++++++++++
 meson.options                              |  1 +
 src/meson.build                            |  4 +++
 src/oem/meta/file_io.c                     | 29 ++++++++++++++++
 src/oem/meta/meson.build                   |  3 ++
 6 files changed, 83 insertions(+)
 create mode 100644 include/libpldm/oem/meta/libpldm/file_io.h
 create mode 100644 src/oem/meta/file_io.c
 create mode 100644 src/oem/meta/meson.build

diff --git a/include/libpldm/meson.build b/include/libpldm/meson.build
index 4ff250c..83d4fee 100644
--- a/include/libpldm/meson.build
+++ b/include/libpldm/meson.build
@@ -34,3 +34,10 @@ if get_option('oem-ibm').allowed()
     'oem/ibm/libpldm/state_set_oem_ibm.h'
   )
 endif
+
+if get_option('oem-meta').allowed()
+  libpldm_include_dir += include_directories('oem/meta')
+  libpldm_headers += files(
+    'oem/meta/libpldm/file_io.h'
+  )
+endif
diff --git a/include/libpldm/oem/meta/libpldm/file_io.h b/include/libpldm/oem/meta/libpldm/file_io.h
new file mode 100644
index 0000000..dc22918
--- /dev/null
+++ b/include/libpldm/oem/meta/libpldm/file_io.h
@@ -0,0 +1,39 @@
+#ifndef FILEIO_H
+#define FILEIO_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stddef.h>
+#include <stdint.h>
+#include "utils.h"
+
+struct pldm_msg;
+/** @brief PLDM Commands in OEM META type
+ */
+
+enum pldm_fileio_commands {
+	PLDM_WRITE_FILE = 0x2,
+	PLDM_READ_FILE = 0x3,
+};
+
+enum file_io_type {
+	POST_CODE = 0x00,
+};
+
+struct pldm_write_file_req {
+	uint8_t file_handle;
+	uint32_t length;
+	uint8_t file_data[1];
+} __attribute__((packed));
+
+int decode_write_file_io_req(const struct pldm_msg *msg, size_t payload_length,
+			     uint8_t *file_handle, uint32_t *length,
+			     struct variable_field *data);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* FILEIO_H */
diff --git a/meson.options b/meson.options
index 57d922a..2b6e37e 100644
--- a/meson.options
+++ b/meson.options
@@ -2,3 +2,4 @@ option('abi', type: 'array', description: 'Constrain exposed symbol classes', ch
 option('tests', type: 'feature', description: 'Build tests', value: 'enabled')
 option('oem-ibm', type: 'feature', description: 'Enable IBM OEM PLDM', yield: true)
 option('abi-compliance-check', type: 'feature', description: 'Detect public ABI/API changes')
+option('oem-meta', type: 'feature', description: 'Enable META OEM PLDM', yield: true)
\ No newline at end of file
diff --git a/src/meson.build b/src/meson.build
index 5b9dd2f..f8754cc 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -16,3 +16,7 @@ subdir('transport')
 if get_option('oem-ibm').allowed()
    subdir('oem/ibm')
 endif
+
+if get_option('oem-meta').allowed()
+   subdir('oem/meta')
+endif
diff --git a/src/oem/meta/file_io.c b/src/oem/meta/file_io.c
new file mode 100644
index 0000000..9e21ccf
--- /dev/null
+++ b/src/oem/meta/file_io.c
@@ -0,0 +1,29 @@
+#include "libpldm/file_io.h"
+#include "base.h"
+#include <endian.h>
+#include <string.h>
+#include <stdio.h>
+#include "utils.h"
+
+LIBPLDM_ABI_STABLE
+int decode_write_file_io_req(const struct pldm_msg *msg, size_t payload_length,
+			     uint8_t *file_handle, uint32_t *length,
+			     struct variable_field *data)
+{
+	if (msg == NULL || file_handle == NULL || length == NULL) {
+		return PLDM_ERROR_INVALID_DATA;
+	}
+
+	struct pldm_write_file_req *request =
+		(struct pldm_write_file_req *)msg->payload;
+
+	*file_handle = request->file_handle;
+	*length = le32toh(request->length);
+
+	data->length = payload_length -
+		       (sizeof(request->file_handle) + sizeof(request->length));
+
+	data->ptr = request->file_data;
+
+	return PLDM_SUCCESS;
+}
diff --git a/src/oem/meta/meson.build b/src/oem/meta/meson.build
new file mode 100644
index 0000000..fad293b
--- /dev/null
+++ b/src/oem/meta/meson.build
@@ -0,0 +1,3 @@
+libpldm_sources += files(
+  'file_io.c'
+  )
-- 
2.25.1

